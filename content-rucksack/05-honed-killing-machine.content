% Field Notes | 05: Honed Killing Machine
% Jason Grigsby and Lyza Danger Gardner


# 5. A Honed Killing Machine

## Level Up

Get a grasp on some of the badass HTML5 APIs that give us some real firepower against those mobile zombies.

### Mission

Train up as a specialist in the ApplicationCache and Geolocation APIs to give the Sigma Stronghold an offline mode and prep for the next, highly-classified mission.

## ApplicationCache!

### Important Note

Both of the examples in this section (ApplicationCache and Geolocation) need a local apache web server to function. If you are viewing the examples as local files in your browser, you may experience some difficulty. Not a big deal! If you don't have a local web server, you can still follow along!

### Cache Manifest Quickies

1. File must be served as `text/application-cache`. Often this can be effected by adding the following line to an apache config (`.htaccess` file or the like).

    ~~~
    AddType text/cache-manifest .appcache
    ~~~

2. Basic cache manifest syntax:

    ~~~
    CACHE MANIFEST

    CACHE:
    foo.jpg
    bar.png
    index.html
    ding/dong.html
    ~~~

3. Reference a cache manifest with the `manifest` attribute of the `<html>` tag. e.g. `<html manifest="manifest.appcache">`.

## Step 1: Creating a Cache Manifest for the Sigma Stronghold Site

### Do This

1. Review the contents of the [`rucksack/missions/06-appcache`](../missions/06-appcache/) folder. 
2. Edit `.htaccess` in a text editor. We need to make sure that the `manifest.appcache` file is served correctly so that browsers recognize it as a cache manifest.
3. Edit the `index.html` file. Add a `manifest` attribute that references the cache manifest file.


### Snippet Reference: .htaccess and index.html

#### Add to the top of the `.htaccess` file

~~~
AddType text/cache-manifest .appcache
~~~

#### Edit the `<html>` tag in `index.html`

~~~{.html}
<html manifest="manifest.appcache">
~~~

## Step 2: Improving our AppCache

### Tools

* [Font Squirrel](http://www.fontsquirrel.com/fontface/generator)

### Google Font situation

By changing the User Agent sent by our browser, we can see that Google serves up different font file types for different clients

### Snippet Reference: Google fonts

#### Different font files

Here are some of the font files Google uses for different browsers. These are for our two fonts, `Nosifer` and `Special Elite`.

~~~
http://themes.googleusercontent.com/static/fonts/specialelite/v3/9-wW4zu3WNoD5Fjka35Jm8OV-75E7mII8OPOWd5roDg.eot
http://themes.googleusercontent.com/static/fonts/nosifer/v2/22TLRN_sb7eGnW3UzCoN7w.eot
http://themes.googleusercontent.com/font?kit=9-wW4zu3WNoD5Fjka35JmzyKAGS2js9R2mTcvyyc0eU#SpecialElite
http://themes.googleusercontent.com/font?kit=D7AHdI04SWFitvSDiAIeWQ#Nosifer
http://themes.googleusercontent.com/static/fonts/nosifer/v2/7n0ZFTD4V11-kkhjuR2UIwLUuEpTyoUstqEm5AMlJo4.woff
http://themes.googleusercontent.com/static/fonts/specialelite/v3/9-wW4zu3WNoD5Fjka35Jm4kaQb-UsZVONjobs91YQtw.woff
~~~

### Do This

We're going to configure our own web fonts. We've put the fonts you need in [`rucksack/missions/06-appcache/fonts`](../missions/06-appcache/fonts). 

1. Edit [`rucksack/missions/06-appcache/styles.css`](../missions/06-appcache/styles.css). Add the `@font-face` rules to the top of the stylesheet.
2. Edit the `manifest.appcache` file. Add the URLs for the fonts we are now serving ourselves.
3. Remove the Google Fonts stylesheet `<link>` tag from `index.html`.

### Snippet Reference: Web Fonts

#### styles.css

Add the following to the very top of the `styles.css` file:

~~~{.css}
/* Generated by Font Squirrel (http://www.fontsquirrel.com) on April 1, 2012 */
@font-face {
    font-family: 'NosiferRegular';
    src: url('fonts/nosifer-webfont.eot');
    src: url('fonts/nosifer-webfont.eot?#iefix') format('embedded-opentype'),
         url('fonts/nosifer-webfont.woff') format('woff'),
         url('fonts/nosifer-webfont.ttf') format('truetype'),
         url('fonts/nosifer-webfont.svg#NosiferRegular') format('svg');
    font-weight: normal;
    font-style: normal;

}
@font-face {
    font-family: 'SpecialEliteRegular';
    src: url('fonts/special-elite-webfont.eot');
    src: url('fonts/special-elite-webfont.eot?#iefix') format('embedded-opentype'),
         url('fonts/special-elite-webfont.woff') format('woff'),
         url('fonts/special-elite-webfont.ttf') format('truetype'),
         url('fonts/special-elite-webfont.svg#SpecialEliteRegular') format('svg');
    font-weight: normal;
    font-style: normal;
}
~~~

#### manifest.appcache

Add these to the bottom of the `CACHE` section in the `manifest.appcache`:

~~~
fonts/nosifer-webfont.eot
fonts/nosifer-webfont.svg
fonts/nosifer-webfont.ttf
fonts/nosifer-webfont.woff
fonts/special-elite-webfont.eot
fonts/special-elite-webfont.svg
fonts/special-elite-webfont.ttf
fonts/special-elite-webfont.woff
~~~

#### Remove Google Fonts `<link>`

Remove this line from `index.html`:

~~~
<link href="http://fonts.googleapis.com/css?family=Nosifer|Special+Elite" rel="stylesheet">
~~~


## Step 3: Focus on Geolocation!

#### Quick Details

Browsers that implement the W3C geolocation spec expose the `navigator.geolocation` object and its methods to the browser.

### Reference: Using the W3C Geolocation API

~~~ {.javascript}
navigator.geolocation.getCurrentPosition(successCallback, errorCallback);

function successCallback(position) {
  // Latitude and Longitude are often what you're after.
  // They're properties of the coords object on position.
  alert(position.coords.latitude + ', ' + position.coords.longitude);
}
function errorCallback(error) {
  // Do something or freak out.
}
~~~

### Do This

1. Open the [`rucksack/missions/07-geolocation/index.html`](../missions/07-geolocation/index.html) file in your text editor.
2. Call the `getCurrentPosition` method in supporting browsers.
3. Define success callback and error callback functions.

### Snippet Reference: Geolocation JavaScript

#### JavaScript

~~~ {.javascript}
if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(onGeoSuccess, onGeoError);
} else {
  onGeoError(new Error('Sorry, Geolocation not supported in this browser!'));
}
function onGeoSuccess(position) { // Our success callback
  var coordinates = position.coords;
  alert(coordinates.latitude + ", " + coordinates.longitude);
}
function onGeoError(error) { // Our error callback
  alert(error.message);
}
~~~

## Resources

### ApplicationCache

* [WHATWG ApplicationCache/Offline Spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html)
* [HTML5Rocks Tutorial on AppCache](http://www.html5rocks.com/en/tutorials/appcache/beginner/)
* A handy site that lists a lot of the common gotchas can be found at <http://appcachefacts.info/>.
* View current ApplicationCache information in Chrome by navigating to `chrome://appcache-internals`.
* [W3C Fixing ApplicationCache Community Group](http://www.w3.org/community/fixing-appcache/)

### A bit on `@font-face`

* [Essential Guide to @font-face](http://sixrevisions.com/css/font-face-guide/) (A bit out of date, but decent)
* Paul Irish's [Bulletproof @font-face](http://paulirish.com/2009/bulletproof-font-face-implementation-syntax/)
* [Font Squirrel](http://www.fontsquirrel.com/fontface/generator)


### Geolocation

* The spec for the [W3C Geolocation API spec](http://dev.w3.org/geo/api/spec-source.html) is relatively short and easy to understand (as specs go).


## Done

* Trained up on the basics of ApplicationCache.
* Built a cache manifest for the Sigma Stronghold site.
* Worked around cache manifest hardships by hosting our web fonts and updating our CSS.
* Learned the basics of the Geolocation API.
* Built a quick sample page using the W3C Geolocation API.

## The Result

* The [Sigma Stronghold website with an offline mode](../victories/06-appcache) via Application Cache.
* A test of the [W3C Geolocation](../victories/07-geolocation) API.

# Onward!

Turns out Sigma Stronghold isn't alone, nor are you. We can join with the mobile web [band of brothers](06-band-of-brothers.html).