% Field Notes | Zombie 101, Breaking Development, Orlando
% Jason Grigsby and Lyza Danger Gardner

----------------

# 0. Building your battle kit

## Weapons

Arm yourself with these tools for our adventure today:

1. A local web server (optional, but handy!) [more info](web-server.html)
2. A good text editor
3. A JavaScript/DOM debug tool (We recommend WebInspector in Chrome/Safari/Webkit browsers or FireBug in FireFox).

## Suit Up

TODO: Go install these things from the rucksack

## Launch

TODO: Watch first set of slides

## Stuff that needs sorting

## Weapons for Performance

* [ySlow](http://developer.yahoo.com/yslow/)
* [W3C validator](http://validator.w3.org/)
* [Smush.it](http://smush.it)
* [SpriteMe](http://spriteme.org/)

-----------------------

# 2. Boot Camp: Performance and Semantic Clarity

## Level Up

Learn how to analyze front-end performance, fix common gotchas and tweak server-side settings to speed up sites for all users, mobile included. Use semantic markup to be ready for the future. Get ready to face the zombies.

### Mission

Help Sergeant Dingus and Private Pyle make improvements to the Sigma Stronghold website to make it ready for the mobile/zombie web.

## Step 0: Getting the current picture

By using the *ySlow* browser extension, we can see that the Sigma Stronghold website is over half a megabyte in size. We've identified some invalid code, as well. Our goal: smaller, better faster.

### Tools

* [ySlow](http://developer.yahoo.com/yslow/)
* [W3C validator][w3cv]

### Do This

1. [View the current Sigma Stronghold web site](../missions/01-bootcamp-performance/) in a browser.


### Extra Credit

* If you have the ySlow extension installed, you can run it yourself.
* Run the HTML code in [index.html](../missions/01-bootcamp-performance/index.html) through the W3C validator.

### Snippet Reference: Weather

#### Weather widget

~~~~{.html}
<div id="weather">
  <div style='width: 240px; height: 420px; 
   background-image: url( http://vortex.accuweather.com/adcbin/netweather_v2/backgrounds/black_240x420_bg.jpg );
   background-repeat: no-repeat; background-color: #000000;' >
  <div id='NetweatherContainer' style='height: 405px;' >
  <script src='http://netweather.accuweather.com/adcbin/netweather_v2/netweatherV2ex.asp?
    partner=netweather&tStyle=whteYell&logo=1&zipcode=10001&lang=eng&size=12&theme=black&metric=0&target=_self'>
  </script>
  </div>
  <div style='text-align:center; font-family:arial, helvetica, verdana, sans-serif; font-size:10px; line-height:15px; color:#FFFFFF;'>
  <a style='font-size: 10px; color: #FFFFFF' 
    href='http://www.accuweather.com/us/ny/new-york/10001/city-weather-forecast.asp?partner=accuweather' >
    Weather Forecast</a> | <a style='color: #FFFFFF' href='http://www.accuweather.com/maps-satellite.asp' >Weather Maps</a> | 
  <a style='color: #FFFFFF' href='http://www.accuweather.com/index-radar.asp?partner=accuweather&zipcode=10001' >Weather Radar</a>
  </div></div>
  </div>
</div>

~~~~

##### index.html

## Step 1: Fixing what's broken and removing unused or unneeded elements

Mobile browsers and devices have less tolerance for broken code, and size really, really matters. We have to write clean markup and pay attention to *why* we're dropping stuff onto our web pages.

### Snippet Reference: Quick hits

TODO: Fix CSS to display file names


#### CSS link tag optimization

##### Instead of

~~~~{.html}
  <link href="http://fonts.googleapis.com/css?family=Nosifer" rel="stylesheet">
  <link href="http://fonts.googleapis.com/css?family=Butcherman" rel="stylesheet">
  <link href="http://fonts.googleapis.com/css?family=Creepster" rel="stylesheet">
  <link href="http://fonts.googleapis.com/css?family=Special+Elite" rel="stylesheet">
~~~~

##### Use

~~~~{.html}

<link href="http://fonts.googleapis.com/css?family=Nosifer|Special+Elite" rel="stylesheet">
~~~~~

#### Fix 404s

##### Instead of

~~~~{.css}
h2 {
  line-height: 1.25em;
  font-size: 1.25em;
  background: url(images/blip.jpg) no-repeat 0 2px;
  padding-left: 25px;
  margin: 0 0 .25em 0; 
}

~~~~
  
##### Use

~~~~{.css}
h2 {
  line-height: 1.25em;
  font-size: 1.25em;
  background: url(images/blip.png) no-repeat 0 2px;
  padding-left: 25px;
  margin: 0 0 .25em 0; 
}

~~~~

## Step 2: Image optimization

Remember the 90s, when we optimized our GIF color palettes and made sure our images were small? It's back. Don't forget about those core tenets of image optimization!

### Tools

* [Smush.it](http://smush.it)



## Step 3: Server-side shenanigans

For front-end devs, the idea of futzing about on the server can sometimes feel onerous. For many, many sites hosted using the Apache web server, it really is as easy as editing an **`.htaccess`** file.

### Snippet Reference: .htaccess

#### A sample .htaccess file.

        # Turn on and configure GZIP compression
        <IfModule mod_deflate.c>
         SetOutputFilter DEFLATE
         # Don’t compress
         SetEnvIfNoCase Request_URI \.(?:gif|jpe?g|png)$ no-gzip dont-vary
         SetEnvIfNoCase Request_URI \.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary
         #Dealing with proxy servers
         <IfModule mod_headers.c>
         Header append Vary User-Agent
         </IfModule>
        </IfModule>
        
        # Use mod_expires to set future expirations on resources
        <IfModule mod_expires.c>
        ExpiresActive On
        ExpiresByType text/html "access plus 1 seconds"
        ExpiresByType image/gif "access plus 2 years"
        ExpiresByType image/jpeg "access plus 2 years"
        ExpiresByType image/png "access plus 2 years"
        ExpiresByType text/css "access plus 2 years"
        ExpiresByType text/javascript "access plus 2 years"
        ExpiresByType application/x-javascript "access plus 2 years"
        ExpiresByType image/x-icon "access plus 2 years"
        </IfModule>

        # Turn off ETags
        FileETag none


## Getting all semantic up in here

Fighting the good fight of truly separating content from presentation.

### Some Details

#### Some of the things improved in the Sigma Stronghold markup:

* `div#navigation` changed to `<nav>` element.
* `#page` id removed from `<div>`; used parent-child selector instead.
* Convert `#footer` to `<footer>` element.
* Reduce structural complexity in news items: removed extra `<div>`s.
* Replaced `span.grey` with `<small>`
* `span.black` was pointless; no style for it. Also some other useless spans in the news divs.
* Instead of `.red`, used an `<em>` element, which carries semantic meaning.
* Removed extra internal `<div>`s from sidebar.
* `#left` and `#right` renamed to `#main` and `#sidebar`, respectively

#### Taking it further...

We didn't do these things but they might be cool, too:

* Address could be hCard
* `<article>` element instead of `<div>` for news items.
* `<section>` element instead of other `<div>`s.

## Resources

* Developer Tools

    * [ySlow](http://developer.yahoo.com/yslow/)
    * [W3C validator][w3cv]
    * [Smush.it](http://smush.it)
    * [SpriteMe](http://spriteme.org/) for creating CSS sprites. By combining multiple CSS images into individual sprites, you both reduce overall image file size (usually) and reduce the number of HTTP requests (definitely).
    * [Online YUI Compressor](http://www.refresh-sf.com/yui/) Handy tool to help compress and minify CSS and JavaScript.
    * [More information about enabling GZIP on apache](http://www.techiepark.com/tutorials/how-to-enable-gzip-compression-in-apache-server-to-speed-up-website/)

* HTML5 and Semantics

    * [HTML5 structure—HTML 4 and XHTML 1 to HTML5](http://oli.jp/2009/html5-structure4/)
    * [*A List Apart*: Semantics in HTML5 (John Allsop)](http://www.alistapart.com/articles/semanticsinhtml5/)
    * [Dive into HTML5: Semantics](http://diveintohtml5.info/semantics.html)

* Code resources

    * [Sample .htaccess file](../survival-tools/.htaccess.example).
    * [Starting point of Sigma Stronghold Web site](../missions/01-bootcamp-performance)
    * [Sigma Stronghold Web site now TBD TODO](../victories/01-bootcamp-performance)


## Done and learned: Level Up!

* Analyzed performance and validated code using *ySlow* and the *W3C Validator*.
* Reviewed and considered content for its usefulness and performance impacts.
* Optimized images and reduced overall payload.
* Reduced div-itis and clutter; improved markup to be more semantic and future friendly.
* Learned about performance gotchas that are especially important for mobile.

[w3cv]: http://validator.w3.org/ "W3C Validator"

-----------------------

# 3. Release the Hounds! Responsive Web Design

## Level Up

Learn to let our content flow like water and create a site that adapts itself to different environments.

### Mission

Convert the Sigma Stronghold website to a mobile-first Responsive Web Design.

## The Fluid Formula

To convert pixel-based layout elements to fluid ones in CSS:

     result = target
              ------
              context



## Step 0: Converting the CSS to a fluid layout

### Do This

1. View [the current version of the Sigma Stronghold website](../missions/02-fluid-layout/) in your browser.
2. Open the [`styles.css`](../missions/02-fluid-layout/styles.css) file in a text editor.
3. Edit the CSS properties for the selectors `body > div` and `#container`. Change `width` to `max-width`.


### Snippet Reference: styles.css


#### Instead of

~~~ {.css}
body > div {
  width: 920px;
  margin: 0 auto;
  border-color: rgba(255, 255, 255, 0.2);
  border-width: 0px 7px; 
}
~~~

#### Use

~~~ {.css}
body > div {
  max-width: 920px;
  margin: 0 auto;
  border-color: rgba(255, 255, 255, 0.2);
  border-width: 0px 7px;
}
~~~

#### Instead of

~~~ {.css}
#container {
  zoom: 1;
  background: black;
  padding: 10px;
  width: 900px;
  clear: both; 
}
~~~

#### Use

~~~ {.css}
#container {
  zoom: 1;
  background: black;
  padding: .625em;
  max-width: 900px;
  clear: both;
}
~~~

### Do This

1. Edit the CSS rule for `#main`. Set the width to the percentage we determine.
2. Edit the CSS rule for `#sidebar`. Set the `margin-left` value to the percentage we determine.
3. Save the file. We're fluid!
4. Reload the [Sigma Stronghold website](../missions/02-fluid-layout/) in your browser with your new styles.

### Snippet Reference: styles.css, cont.

#### Instead of

~~~ {.css}
#main {
  zoom: 1;
  margin-left: 10px;
  clear: left;
  float: left;
  width: 550px;
  ...           // And so on
}
~~~

#### use

~~~ {.css}
#main {
  zoom: 1;
  margin-left: 1.5%;
  clear: left;
  float: left;
  width: 60%;
  ...
}
~~~

#### Instead of

~~~ {.css}
#sidebar {
  margin-left: 570px; 
}
~~~

#### Use

~~~ {.css}
#sidebar {
  margin-left: 63.5%;
}
~~~

### Snippet Reference: Finished Fluid CSS

#### Final CSS

You can find the final CSS for the fluid layout in [this file](../victories/02a-fluid-layout/styles.css)

## Step 1: Media Queries!

### Snippet Reference: Sample Media Queries

#### Inline

~~~ {.css}
@media screen and (min-width: 600px) {
  // In browsers that support media queries,
  // rules in here will only be applied if the
  // query expression evaluates as true
}
~~~

#### Link tag

~~~ {.html}
<link rel="stylesheet" media="screen and (min-width:600px)" href="thing.css">
~~~


### Do This: Building our Media Query

We're going to make the fluid layout of the Sigma Stronghold site more responsive by adding some media queries for narrow-width screens.

1. **Close** the current styles.css file you were editing. We're going to move to the next mission.
2. Load the [fluid version of the Sigma Stronghold website](../missions/03-responsive/) in your browser.
3. **Open** [this starter CSS file](../missions/03-responsive/media-query.css) in your text editor—we'll be building our media query-wrapped CSS here.
4. Replace the placeholder `@media` text at the top of the file with the appropriate media query.

### Snippet Reference

##### Our Media Query

~~~{.css}
@media all and (max-width:600px {
  body {
    /* EDIT ME */
  }
  ... /* More CSS Rules */
}
~~~


### Do This: Changing the layout for narrow screens

1. Edit the `#main, #sidebar` rule to clear and not float.
2. Edit the `body` rule to remove the background image.
3. Edit the `#header nav ul li` rule to make nav items span the full width and not float.

### Snippet Reference: Layout updates in CSS

#### Updated CSS Rules

~~~{.css}

@media all and (max-width:600px) {
  #main, #sidebar {
    width: 100%;
    float: none;
    clear: both;
    margin: 0;
  }

  body {
    background-image: none;
  }

  #header {
    padding: 1em 0;
  }
  #header nav ul li {
    float: none;
    clear: both;
    width: 100%;
    margin: .5em 0;
  }
  ...

~~~

### Do This: Putting it together

1. Copy the finished media query CSS into **the bottom of the `styles.css` file** you should have open above (if you don't, [here is a link to it](../missions/03-media-queries/styles.css) ).
2. Save it!
3. Launch! Reload the [updated Sigma Stronghold website](../missions/03-media-queries) site to check your changes.

### Snippet Reference: Stuck?

#### The updated site

You can view the Sigma Stronghold website with the narrow-screen media queries applied [here](../victories/03-media-queries).

### Done

* Sigma Stronghold site layout is now proportional and fluid, with some max-widths on containers.

## Step 2: Reworking the Baseline CSS

### Do This

1. Close the current `stlyes.css` in your editor. We are moving on!
2. Open the new and improved [`styles.css`](../missions/04-mobile-first/styles.css) in your editor.
3. Edit the following rules. *Be careful not to edit the rules within the media query yet*.

    1. `#body`: Remove `background-image` and `background-repeat` properties (no background image in baseline).
    2. `#body > div`: Remove all `border-` properties (no border in baseline).
    3. `#main`: Replace contents of this rule with the version inside of the media query (single-column layout is baseline).
    4. `#sidebar`: Ditto. Replace with version from media query (ditto).


### Snippet Reference: Baseline CSS changes


#### Instead of

~~~ {.css}
body {
  background-color: black;
  color: white;
  font: 100% "Special Elite";
  background-image: url(images/moon.jpg);
  background-repeat: no-repeat;
}
~~~

#### Use

~~~ {.css}
body {
  background-color: black;
  color: white;
  font: 100% "Special Elite";
}
~~~

#### Instead Of

~~~ {.css}
body > div {
  max-width: 920px;
  margin: 0 auto;
  border-color: rgba(255, 255, 255, 0.2);
  border-width: 0px 7px;
  border-style: solid;
}
~~~

#### Use

~~~ {.css}
body > div {
  max-width: 920px;
  margin: 0 auto; 
}
~~~

#### Instead of

~~~ {.css}
#main {
  zoom: 1;
  margin-left: 1.5%;
  clear: left;
  float: left;
  width: 60%;
  /// ... And so on ...
}
~~~

#### Use

~~~ {.css}
#main {
  width: 100%;
  float: none;
  clear: both;
  margin: 0;
  zoom: 1;
  /// ... And so on ...
}
~~~

#### Instead of

~~~ {.css}
#sidebar {
  margin-left: 63.5%;
}
~~~

#### Use

~~~ {.css}
#sidebar {
  float: none;
  clear: both;
  margin: 0; 
}
~~~

## Step 3: Adding breakpoint CSS

### Do This

1. Remove the media query `(max-width: 600px)` and all of its contained CSS from the bottom of the file. We are going to rebuild it.
2. Add a new media query to the bottom of the file (with no rules in it yet). It should apply to `all` media types that have a minimum width of `750px`.

### Snippet Reference: 750px Media Query

#### New media query

~~~{.css}
@media all and (min-width:750px) {

}
~~~

### Do This

1. Add rules to 750px breakpoint. For speed, we're giving them to you. Copy and paste from the Snippet Reference.

### Snippet Reference: 750px breakpoint CSS

#### In styles.css

~~~ {.css}
@media all and (min-width:750px) {
  /* Adding back in the background image */
  body {
    background-image: url(images/moon.jpg);
    background-repeat: no-repeat;
  }

  /* Here's a border */
  body > div {
    border-color: rgba(255, 255, 255, 0.2);
    border-width: 0px 7px;
    border-style: solid;
  }

  /* Float #main left; make it 60% width of its parent container */
  #main {
    margin-left: 1.5%;
    clear: left;
    float: left;
    width: 60%;
  }

  /* A fluid left margin for a right-aligned #sidebar */
  #sidebar {
    margin-left: 63.5%;
    clear: none;
  }
}
~~~


### Do This: Add a breakpoint for narrow screens

1. Add a media query and relevant CSS rules for screens 550px or narrower. Use the CSS in the Snippet Reference. Paste this at the *bottom* of `styles.css`.

### Snippet Reference: 500px Breakpoint CSS

#### At the bottom of styles.css


~~~ {.css}
@media all and (max-width:550px) {
  /* Here is the stacked navigation */
  #header nav ul li {
    float: none;
    clear: both;
    width: 100%;
    margin: .5em 0;
  }
  #header nav ul li a {
    margin: 0;
    padding: .75em;
  }
  /* Padding and font adjustments */
  h1 {
    font-size: 1.75em;
    line-height: 1.25em;
  }
  h3 {
    font-size: 1.1em;
    line-height: 1.2em;
  }
  p {
    font-size: .9em;
    line-height: 1.4em;
  }
  #header {
    padding: 1em 0;
  }
  #header h1, #header h3 {
    padding: 0 .375em;
  }
}
~~~

### If you have any woes...

1. You can find the updated file HERE TBD TODO



## Resources

For more expounding on the topic of relinquishing control, see Lyza's presentation ["Crap, it doesn't look quite right: Or, How I learned to stop worrying and set my mobile web sites free"](http://www.slideshare.net/lyzadanger/crap-it-doesnt-look-quite-right-or-how-i-learned-to-stop-worrying-and-set-my-mobile-web-sites-free-9518337) on Slideshare.

* See Ethan's ([@beep](http://twitter.com/beep)) original article about RWD on [A List Apart](http://www.alistapart.com/articles/responsive-web-design/)
* Fluid formula: `result = target / context`
* Rough rule of thumb for font sizes: `1em = 100% ~= 16px ~= 12pt`. *Approximately*.
* Percentages (%) and `em`s are both fluid units, `pt`s, `px`, inches and pica are fixed. (Technically, `px` are not *absolute* absolute, as the size of a pixel varies with different devices and screens and are not *fixed*, per se. However, for our purposes, they are effectively absolute, as they do not scale).

## Done

* stuff

## Needs sorting

### Mobile- (or content-)first RWD

#### Baseline CSS

* Single-column view
* Tabbed navigation
* No body background image

#### 750px Breakpoint (and wider)

* Two-column layout
* Body background image
* Font and padding adjustments

#### 550px Breakpoint (and narrower)

* Vertical navigation
* Font and padding adjustments


* You can always [read the spec](http://www.w3.org/TR/css3-mediaqueries/)

If you are curious, you can see the [first version of media query CSS here](sigma-media-query.html) (the desktop-first, single breakpoint version).


-----------------------------------

# 4. Bloodier Uprisings

## Techniques for handling IE in RWD

### Conditional Comments

~~~ {.html}
<link rel="stylesheet" type="text/css" href="taps.css" />
<link rel="stylesheet" type="text/css" href="layout.css" media="all and min-width: 481px)">
<!--[if (lt IE 9) & (!IEMobile)]>
<link rel="stylesheet" type="text/css" href="layout.css" media="all" />
<![endif]-->
~~~

The conditional comments only apply to IE versions less than 9 (lt IE 9) and those that are not IE Mobile (!IEMobile). IE9 supports media queries and since this is a mobile first responsive web design, the fact IE Mobile doesn’t support the media query is fine. It should get the mobile (default) layout regardess.

#### References

* [Windows mobile media queries](http://adactio.com/journal/4494/)
* [Microsoft documentation on conditional comments syntax](http://msdn.microsoft.com/en-us/library/ie/ms537512(v=vs.85).aspx)

### JavaScript Polyfills

These solutions use JavaScript to make Internet Explorer understand some basic media queries.

* [Respond.js](https://github.com/scottjehl/Respond)
* [css3-mediaqueries-js](http://code.google.com/p/css3-mediaqueries-js/)

Respond.js was created by Scott Jehl and the Filament Group for the Boston Globe project. It is the fastest solution, but only supports a subset of media query options.

When using these polyfills, test carefully and verify the scripts perform adequately for you on older computers. The scripts are fairly intensive.

## Preventing extra downloads when using CSS background images 

### Things that work:

* Use display:none on the parent element
* Media queries that don’t overlap:

~~~ {.css }
@media all and (max-width: 500px) {
    #logo {background-image:url('small.png');}
}
@media all and (min-width: 501px) {
    #logo {background-image:url('large.png');}
}
~~~

### Newer browsers support more

As of iOS 4.2:

* background-image:none on the element will override image without an extra download
* replacing a background-image will only result in one image being downloaded

Be aware that even in the latest browsers, display:none on element still downloads images.

#### References

* [Media Query Image Download Test](http://www.cloudfour.com/examples/mediaqueries/image-test/)
* [Media Queries for Mobile Devices](http://aaronmentele.com/2012/01/15/media-queries-for-mobile-browsers/)

## Responsive IMGs

Big challege for RWD: img tags only allow one src attribute. 

## Option 1: JavaScript checks screen width and sets a cookie

###Best examples

* [Responsive Images JS](https://github.com/filamentgroup/Responsive-Images)
* [Adaptive Images](http://adaptive-images.com/)

### Problems

* Sometimes the browser requests images before the JavaScript executes which means the cookie isn’t set. Race condition.
* What is the fallback if cookies aren’t enabled?
* Relies on the current way browsers load content which could change. No contract between the browser and the developer.

## Option 2: Noscript tag

* Put small image inside noscript tag.
* Put info for other images in data-* on noscript tag.
* Use javascript to build correct img tag for screen size.

~~~ {.html}
<noscript data-large="Koala.jpg" data-small="Koala-small.jpg" data-alt="Koala">
<img scr="Koala.jpg" alt="Koala" />
</noscript>
~~~

### Best examples

* [Testing Responsive Images](http://www.monoliitti.com/images/)
* [Creating responsive images using the noscript tag](http://www.headlondon.com/our-thoughts/technology/posts/creating-responsive-images-using-the-noscript-tag)

### Problems

* Markup has been changed in a way that only makes sense for this solution.
* No longer semantic.

## Option 3: Sencha.io SRC

* Use or build a service like Sencha.io SRC to deliver the correctly sized image:

~~~ {.html}
<img src="http://src.sencha.io/[ORIGINAL IMAGE URL]" />
~~~

### Best examples

* [How to use src.sencha.io](http://www.sencha.com/learn/how-to-use-src-sencha-io/)
* [Sencha.io Src Update](http://www.sencha.com/blog/sencha-io-src-update/)

### Problems

* All of your images are being routed through a third-party service.
* How does Sencha know what size image to use anyways? It relies on device detection which some developers dislike.

## Other RWD Challenges

* Delivering the right size video
* Breakpoint management and zoom levels
    * Look at using EMs for media queries like [Paul Robert Lloyd’s site](http://paulrobertlloyd.com/)
* Progressively enhancing from XHTML-MP to HTML5
* Content ordering (Flexbox can’t come soon enough)
    * [Learn You a Flexbox for Great Good!](http://www.the-haystack.com/2012/01/04/learn-you-a-flexbox/)
* Third-party widgets (particularly ad networks)
* Integrating with content management systems

-----------------------------

# 5. A Honed Killing Machine

## ApplicationCache!

### More Information about ApplicationCache

* There are enough little gotchas in appCache that it may behoove you to [read the spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html).
* A handy site that lists a lot of the common gotchas can be found at <http://appcachefacts.info/>.
* We find that it is easiest to inspect and debug appCache using's Webkit's Web Inspector tool (available in Chrome, Safari).

### Cache Manifest Quickies

1. File must be served as `text/application-cache`. Often this can be effected by adding the following line to an apache config (`.htaccess` file or the like).

    ~~~
    AddType text/cache-manifest .appcache
    ~~~

2. Basic cache manifest syntax:

    ~~~
    CACHE MANIFEST

    CACHE:
    foo.jpg
    bar.png
    index.html
    ding/dong.html
    ~~~

3. Reference a cache manifest with the `manifest` attribute of the `<html>` tag. e.g. `<html manifest="manifest.appcache">`.

### Creating a Cache Manifest for the Sigma Stronghold Site

*Note*: If you are not running apache locally, you may not be able to get cache manifests working on your laptop. No worries!

1. Create a file called `manifest.appcache` in the `sigma-stronghold-website` folder in your rucksack.
2. Let's start by adding the landing page (really all we have of the site!) and its resources to the application cache: CSS, images...etc:

    ~~~
    CACHE MANIFEST

    CACHE:

    index.html
    favicon.ico
    images/blip.png
    images/bomb.png
    images/moon.jpg
    styles.css
    http://fonts.googleapis.com/css?family=Nosifer|Special+Elite
    ~~~

3. Edit the `.htaccess` file in the `sigma-stronghold-website` directory (create `.htaccess` if it doesn't exist yet).

4. Add the line:
    
    ~~~
    AddType text/cache-manifest .appcache
    ~~~
        
5. Edit `index.html`. Change the `<html>` tag to read:

    ~~~
    <html manifest="manifest.appcache">
    ~~~
        
6. Use the WebInspector to see if your appCache worked!

### Improving the Cache Manifest

We need to cache those Google fonts! Add this to the end of the `CACHE` section:

    http://themes.googleusercontent.com/static/fonts/nosifer/v2/7n0ZFTD4V11-kkhjuR2UIwLUuEpTyoUstqEm5AMlJo4.woff
    http://themes.googleusercontent.com/static/fonts/specialelite/v3/9-wW4zu3WNoD5Fjka35Jm4kaQb-UsZVONjobs91YQtw.woff

## Device APIs: Focus on Geolocation!

### W3C Geolocation API

* The spec for the [W3C Geolocation API spec](http://dev.w3.org/geo/api/spec-source.html) is relatively short and easy to understand (as specs go).

#### Quick Details

Browsers that implement the W3C geolocation spec expose the `navigator.geolocation` object and its methods to the browser.

#### Code Snippets

~~~ {.javascript}
navigator.geolocation.getCurrentPosition(successCallback, errorCallback);

function successCallback(position) {
  // Latitude and Longitude are usually what you're after.
  // They're properties of the coords object on position.
  alert(position.coords.latitude + ', ' + position.coords.longitude);
}
function errorCallback(error) {
  // Do something or freak out.
}
~~~

## *Do This*: Building a Quickie Geolocation Test Page

1. Open the `index.html` file in the `where-am-i` folder in your rucksack.
2. Find the `<script>` tags. 

    ~~~ {.javascript}
    <script>
      if (navigator.geolocation) { // Test for W3C geolocation support
        
      }
    </script>
    ~~~
        
3. OK! Now expand upon that:

    ~~~ {.javascript}
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(onGeoSuccess, onGeoError);
    } else {
      onGeoError(new Error('Sorry, Geolocation not supported in this browser!'));
    }
    ~~~

4. *Note*: This won't work (well, there will be JS errors) until we define the `onGeoSuccess` and `onGeoError` callback functions. So let's do that now. Add this to the JavaScript (right after what's already there):

    ~~~~ {.javascript}
    function onGeoSuccess(position) {
      var coordinates = position.coords;
      alert(coordinates.latitude + ", " + coordinates.longitude);
    }
    function onGeoError(error) {
      alert(error.message);
    }
    ~~~~
        
6. Try it out!

7. Having trouble? Find the contents of the `<script>` in [`supplemental/where-am-i/geo-script.js`](../supplemental/where-am-i/geo-script.js).

-------------------------

# 6. A Band of Brothers

* [jQuery Mobile](http://www.jquerymobile.com)
* [JavaScript Date.Format](http://jacwright.com/projects/javascript/date_format/): A small library to emulate PHP-style date formatting.
* [Geo-location-js](http://code.google.com/p/geo-location-javascript/): A very easy cross-platform geolocation library that emulates the W3C Geolocation API.

## *Do This*: A jQuery Mobile Page for Nabbing Zombies

1. Find the "I got one!" starting point in your rucksack in [`i-got-one/index.html`](../i-got-one/index.html).
1. Add a header:

    ~~~ {.html}
    <div data-role="header">
      <h1>I got one!</h1>
    </div>
    ~~~

1. Add a `<select>` element, an `<input>` button and an empty `<ul>` to hold our incoming dead zombies. This should be the contents of the `<div data-role="content">`:

    ~~~ {.html}
    <div data-role="content">
      <div data-role="fieldcontain">
        <label for="how-zombie">How'd you nab it?</label>
        <select name="how-zombie" id="how-zombie">
          <option value="tank">Tank</option>
          <option value="conflagration">Conflagration</option>
          <option value="poison">Poison</option>
          <option value="nukes">Micro-nukes</option>
          <option value="trickery">Trickery</option>
          <option value="corrosive">Corrosive</option>
          <option value="dismemberment">Dismemberment</option>
        </select>
      </div>
      <input type="button" value="I got one!" id="got-one" data-theme="b" />
      
      <ul data-role="listview" data-inset="true" id="zombielist">
      </ul>
      
    </div>
    ~~~

1. Drop in the intial JavaScript by adding a `<script>` tag after the `geo.js` `<script>` tag:

    ~~~ {.html}
    <script src="zombie.js"></script>
    ~~~

1. You can find the finished version of `index.html` for this step in your rucksack in [`supplemental/band-of-brothers/step1.html`](../supplemental/band-of-brothers/step1.html).

## *Do This*: Persistant data with Lawnchair

For this step, we use [Lawnchair](http://westcoastlogic.com/lawnchair/), an open-source JS library for storing data on the client:

1. Edit the `zombie.js` file.

2. Instantiate the Lawnchair. Add `var zombieChair   = Lawnchair({name: 'zombies'}, function() {});` right after the `zombies` array is created.

    ~~~ {.javascript}
    window.zombieManager = (function() {
      var zombies       = new Array();
      var zombieChair   = Lawnchair({name: 'zombies'}, function() {});
    ~~~~

3. Add an init function. This should go in the returned object in the `zombieManager` function:

    ~~~ {.javascript}
    return {
      // Init; build initial #zombielist
      init          : function() {
        zombieChair.get('zombies', function(zombiesOnIce) {
          if (zombiesOnIce) {
            zombies = zombiesOnIce.value;
          }
        });
        showZombies();
      },
      // Add a new zombie to the list of zombies
      addZombie     : function(zombieWhen, zombieWhere, zombieHow) {
      // ...
    ~~~

4. Update the `addZombie` function such that it also saves the incoming zombie to the Lawnchair:

    ~~~ {.javascript}
      },
      // Add a new zombie to the list of zombies
      addZombie     : function(zombieWhen, zombieWhere, zombieHow) {
        zombies[zombies.length] = {
          when      : zombieWhen.valueOf(),
          where     : zombieWhere,
          how       : zombieHow
        };
        zombieChair.save({key: 'zombies', value : zombies });
        showZombies();
      }
    ~~~

5. Update the `resetZombies` function to clear the Lawnchair using the `nuke` method:

    ~~~ {.javascript}
    var resetZombies = function() {
        zombies = new Array();
        zombieChair.nuke();
        $('li.zombie').remove();
        $('#zombielist').listview('refresh');
      };
    ~~~

6. Now add a call to that new `init` function we wrote...

    ~~~ {.javascript}
    $("#nab-zombie").live('pageinit', function() {
    
      // Initialize our list of zombies
      zombieManager.init();
      // Is Geolocation supported?
      // ...
    ~~~

7. That's a lot of JavaScript. You can also find a final version of `zombie.js` in [`supplemental/band-of-brothers/zombie.js`](../supplemental/band-of-brothers/zombie.js).

----------------------------------

# 7. Desperate Times call for...

## Hybrid App Development with PhoneGap and PhoneGap Build

* [PhoneGap](http://www.phonegap.com)
* [PhoneGap Build](http://build.phonegap.com)

## Anatomy of a PhoneGap Build Config File

Here's our example `config.xml` file.

~~~ {.xml}
<?xml version="1.0" encoding="UTF-8" ?>
    <widget xmlns = "http://www.w3.org/ns/widgets"
        xmlns:gap = "http://phonegap.com/ns/1.0"
        id        = "com.cloudfour.gotone"
        versionCode="10"
        version   = "1.0.0">

    <name>I Got One</name>

    <description>
       Track your zombie kills!
    </description>

    <author href="https://www.cloudfour.com" email="info@cloudfour.com">
        Lyza Gardner and Jason Grigsby
    </author>

    <preference name="orientation" value="portrait" />

    <icon src="app-icons/touch-icon-iphone.png" width="57" height="57"/>
    <icon src="app-icons/touch-icon-ipad.png" width="72" height="72"/>
    <icon src="app-icons/touch-icon-iphone4.png" width="114" height="114"/>

    <gap:splash src="app-icons/splash.png" width="320" height="480" />
    <gap:splash src="app-icons/splash-2x.png" width="640" height="960"/>
</widget>
~~~

(You can also find this in [`supplemental/desperate-times/config.xml`](../supplemental/desperate-times/config.xml)).

-------------------------
# 8. Know Thy Enemy

## Many device detection database options

* [WURFL][wurfl] (Wireless Universal Resource FiLe) by [ScientiaMobile][scientiamobile]
* [DeviceAtlas][deviceatlas] by [dotMobi][dotmobi]
* [OpenDDR][openddr] / New Apache [DeviceMap][devicemap] Project
* [51degrees][51]

## Some sample User Agent strings

~~~

Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5

Mozilla/5.0 (Linux; U; Android 2.2.1; en-us; DROIDX Build/VZW) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 480X854 motorola DROIDX

Mozilla/5.0 (webOS/1.4.5; U; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Version/1.0 Safari/532.2 Pre/1.0

Mozilla/5.0 (Linux; U; Android 2.3.3; en-us; Nexus S Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1

Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.8+ (KHTML, like Gecko) Version/0.0.1 Safari/534.8+

PantechP2020/JIUS05172010R; Mozilla/5.0 (Profile/MIDP-2.0 Configuration/CLDC-1.1; Opera Mini/att/4.2.19039; U; en-US) Opera 9.50

BlackBerry8330/4.5.0.77 Profile/MIDP-2.0 Configuration/CLDC-1.1 VendorID/105

BlackBerry9300/5.0.0.794 Profile/MIDP-2.1 Configuration/CLDC-1.1 VendorID/245

Mozilla/5.0 (Linux; U; Android 2.1-update1; en-us; SAMSUNG-SGH-I897/I897UCJH7 Build/ECLAIR) AppleWebKit/530.17 (KHTML, like Gecko) Version/4.0 Mobile Safari/530.17

facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)
~~~

## *Do This*: Sniffing 'em out

1. Go to the [ScientiaMobile WURFL Explorer][explorer] on your mobile phone
2. Check out the various attributes. What do you see that would be useful?
3. Can you find the screen resolution of your phone?
4. Go to the [ScientiaMobile WURFL Explorer][explorer] on your laptop
5. Try some other mobile user agents from your rucksack for comparison

## WURFL code snipp-lets

~~~ {.php}
<?php
// This assumes the WURFL library is installed and
// a $device object has been initialized.
$value = $device->getCapability('is_wireless_device');
$value = $device->getCapability('cookie_support');
?>
~~~

More documentation on WURFL available on its [Sourceforge page][wurfl].


[zombie-types]: http://uncyclopedia.wikia.com/wiki/Zombie_Types
[wurfl]: http://wurfl.sourceforge.net/
[scientiamobile]: http://www.scientiamobile.com/
[deviceatlas]: http://deviceatlas.com/
[dotmobi]: http://mtld.mobi/
[51]: http://51degrees.mobi/Products/DeviceData.aspx
[devicemap]: http://wiki.apache.org/incubator/DeviceMapProposal
[explorer]: http://www.tera-wurfl.com/explore/
[ress]: http://www.lukew.com/ff/entry.asp?1392