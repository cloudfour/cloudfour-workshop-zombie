% Field Notes | 06: A Band of Brothers
% Jason Grigsby and Lyza Danger Gardner

-------------------------

# 6. A Band of Brothers

## Level Up

Lean on our band of brothers—a mobile framework and some JavaScript libraries—for some real firepower.

### Mission

Build the morale-boosting "I got one!" mobile web app to let Sigma Stronghold members record their zombie kills!

## Step 1: Build a basic jQuery Mobile Page

### Do This

1. Add `<link>` `<script>`, and `<viewport>` tags to the `<head>` element of `index.html` to include the needed JavaScript and CSS.
2. Add simple page elements to `index.html`.

### Snippet Reference: `<head>` items

#### index.html

~~~{.html}
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
<script src="date.format.js"></script>
<script src="geo.js"></script>
~~~

### Snippet Reference: Basic Page Elements

#### Index.html

~~~{.html}
<div data-role="page" id="nab-zombie">
  <div data-role="header">
    <h1>I got one!</h1>
  </div>
  
  <div data-role="content">
    
  </div>
</div>
~~~


## Step 2: Add our controls

### Do This

1. Update the content `div` element. Add a `select` input so soldiers can indicate *how* they just killed a zombie.
2. After the select element, add an "I got one!" button.
3. Add a `<ul>` element to store our burgeoning list of dead zombies.

### Snippet Reference: HTML markup for controls


#### index.html: Select element

~~~{.html}
<div data-role="content">
  <div data-role="fieldcontain">
  
    <label for="how-zombie">How'd you nab it?</label>
    
    <select name="how-zombie" id="how-zombie">
      <option value="tank">Tank</option>
      <option value="conflagration">Conflagration</option>
      <option value="poison">Poison</option>
      <option value="nukes">Micro-nukes</option>
      <option value="trickery">Trickery</option>
      <option value="corrosive">Corrosive</option>
      <option value="dismemberment">Dismemberment</option>
    </select>
    
  </div>
</div>
~~~

#### Index.html: I GOT ONE! button

~~~{.html}
<input type="button" value="I got one!" id="got-one" data-theme="b" />
~~~

#### Index.html `<ul>` for dead zombie storage

~~~{.html}
<ul data-role="listview" data-inset="true" id="zombielist">
</ul>
~~~

## Step 3: Add our JavaScript logic

### Do This

1. Add the `zombie.js` script to `index.html`.

### Snippet Reference: Add the `<script>` tag


#### index.html

~~~{.html}
<script src="zombie.js"></script>
~~~


## Step 4: Persistent storage

### Do This

1. Add `<script>` tags for `Lawnchair.js` and `dom.js`.
2. Initialize a Lawnchair called `zombieChair`.
3. Update the `addZombie` method to save data to the `zombieChair.`

### Snippet Reference: Setting up the ZombieChair

#### Index.html

The `<head>` element of `index.html` should now look like:

~~~{.html}
<head> 
	<title>I Got One!</title> 
	
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
	<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
	<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
	<script src="Lawnchair.js"></script>
	<script src="dom.js"></script>
	<script src="date.format.js"></script>
	<script src="geo.js"></script>
	<script src="zombie.js"></script>
</head> 
~~~

#### Add code to `zombies.js`

#### Instead of

~~~{.js}
window.zombieManager = (function() {
  var zombies       = new Array(),
  zombie_icons      = {   // Each killing method has a corresponding icon
    'nukes'         : 'z2.png',
    'conflagration' : 'z5.png',
    'tank'          : 'z7.png',
    'trickery'      : 'z11.png',
    'poison'        : 'z13.png',
    'corrosive'     : 'z8.png',
    'dismemberment' : 'z14.png'
  },
~~~

#### Use

~~~{.js}
window.zombieManager = (function() {
  var zombies       = new Array(),
  zombieChair       = Lawnchair({name: 'zombies'}, function() {}),
  zombie_icons      = {   // Each killing method has a corresponding icon
    'nukes'         : 'z2.png',
    'conflagration' : 'z5.png',
    'tank'          : 'z7.png',
    'trickery'      : 'z11.png',
    'poison'        : 'z13.png',
    'corrosive'     : 'z8.png',
    'dismemberment' : 'z14.png'
  },
~~~

#### Instead of

~~~{.js}
addZombie = function(zombieWhen, zombieWhere, zombieHow) {
    zombies[zombies.length] = {
      when      : zombieWhen.valueOf(),
      where     : zombieWhere,
      how       : zombieHow
    };
    showZombies();  
},
~~~

#### Use

~~~{.js}
addZombie = function(zombieWhen, zombieWhere, zombieHow) {
    zombies[zombies.length] = {
      when      : zombieWhen.valueOf(),
      where     : zombieWhere,
      how       : zombieHow
    };
    zombieChair.save({key: 'zombies', value : zombies });
    showZombies();  
},
~~~

### Do This, Part II

4. Update the `init` method to check for data in the `zombieChair`.
5. Nuke the `zombieChair` data when the reset button is clicked or tapped.

### Snippet Reference: More zombieChair

#### Instead of

~~~{.js}
init = function() {
  // ...
  showZombies(); 
},
~~~
  
#### Use

~~~{.js}
init = function() {
  // ...
  
  zombieChair.get('zombies', function(zombiesOnIce) {
    if (zombiesOnIce) {
      zombies = zombiesOnIce.value;
    }
  });
  showZombies(); 
},
~~~

#### Instead of

~~~{.js}
resetZombies = function() {
  zombies = [];
  $('li.zombie').remove();
  $('#zombielist').listview('refresh');
};
~~~

#### Use

~~~{.js}
resetZombies = function() {
  zombies = [];
  zombieChair.nuke();
  $('li.zombie').remove();
  $('#zombielist').listview('refresh');
};
~~~


## Resources

* [jQuery Mobile](http://www.jquerymobile.com)
* [JavaScript Date.Format](http://jacwright.com/projects/javascript/date_format/): A small library to emulate PHP-style date formatting.
* [Geo-location-js](http://code.google.com/p/geo-location-javascript/): A very easy cross-platform geolocation library that emulates the W3C Geolocation API.
* [Lawnchair](http://westcoastlogic.com/lawnchair/)

## Done and Learned: Level Up!

* Built a simple page with jQuery Mobile.
* Added interface elements to a jQuery Mobile page.
* Used a geolocation library for better cross-device support.
* Took advantage of a date library, too.
* Added custom functionality to our web app.
* Stored data persistently using the Lawnchair library.

## The Result

See the finished, persistent [I Got One!](../victories/08-got-one) mobile web app.

# Onward!

Sometimes desparate times call for [native mobile apps](07-desperate-times.html) (but built with web technologies, of course!).
