% A Band of Brothers
% Frameworks (jQuery Mobile) and the localStorage API


# I got one!

![](images/06-3ws.png)

Sigma Stronghold leaders want a way for agents in the field to be able to record their zombie kills.

Each time a soldier nabs a zombie out there, he or she should be able to record when, where and how that zombie met its fate. Kind of like a zombie kill board.

# We're going to build this!

## Figure: The end result

![](images/06-screen.png)

# Frameworks

## So, *how* do we build something like this?

Sometimes you don't want to keep re-inventing the same zombie-blasting cannon over and over again. We zombie fighters might be a ragtag bunch, but we stick together.

Frameworks, libraries, tools, templates...all of these can give you a leg up.


# jQuery Mobile

![](images/06-jquerymobile-com.png)

jQuery Mobile is a mobile web framework built atop the popular jQuery library.

jQuery Mobile works hand-in-hand with semantic HTML5 markup.

# To Build our app

1. Build a basic jQuery Mobile page.
2. Add the special sauce to create our "I got one!" app
3. Use a JavaScript library to make our zombie-kill data persistent.

# Building with jQuery Mobile

Content and applications with jQuery Mobile are constructed from:

1. HTML5 markup.
2. JavaScript: jQuery core and jQuery Mobile
3. CSS: jQuery Mobile's CSS
4. Your own custom stuff


# jQuery Mobile Page Structure

![](images/06-jqm.png)

* Delineated by HTML5 `data-` attributes.
* Enables content loading via AJAX.

~~~ {.html}
<div data-role="page">
  <div data-role="header"></div>
  <div data-role="content"></div>
  <div data-role="footer"></div>
</div>
~~~

# Starting *super* Basic


##### index.html


~~~{.html}
<!DOCTYPE html> 
<html> 
<head> 
	<title>I Got One!</title> 
</head> 
<body> 

<div data-role="page" id="nab-zombie">

</div>

</body>
</html>
~~~


# Relying on our bros

Adding in the CSS and JavaScript to make our jQM page go.

## Code

~~~ {.html}
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
<script src="date.format.js"></script>
<script src="geo.js"></script>
<script src="zombie.js"></script>
~~~

* `date.format.js` (Date.format) lets us do much easier date formatting with JavaScript.
* The `geo-location-js` library makes cross-platform geolocation a snap.

# Add a header

At the outset, our jQM page is empty. Let's put some stuff in it.

* This is in the `<div data-role="header">`.
* jQuery Mobile's CSS and JS will stye this into a (rather iOS-esque) header element.

~~~ {.html}
<div data-role="page" id="nab-zombie">
  <div data-role="header">
    <h1>I got one!</h1>
  </div>
</div>
~~~

##### index.html

# And now, a content area...

#### index.html

~~~ {.html}
<div data-role="page" id="nab-zombie">
  <div data-role="header">
    <h1>I got one!</h1>
  </div>
  <div data-role="content">
    <!-- Our content will go here! -->
  </div>
</div>
~~~

### Try it out!

# Et Voila!

## Figure: A header in jQM

![](images/06-header.png)

#### ...OK, so there's no content yet

# Step 2: Dropping in our controls

![](images/06-starting-point.png)

Easy, but not too exciting. Let's put in some UI elements that will let Sigma Stronghold fighters record a nabbed zombie.

# How do we do that?

First, let's add a `<select>` element, just like you would do for any HTML form (except in our case, we don't have a containing form). Add this to the `<div data-role="content">` area.

## Code

~~~ {.html}
<div data-role="content">
  <div data-role="fieldcontain">
    <label for="how-zombie">How'd you nab it?</label>
    <select name="how-zombie" id="how-zombie">
      <option value="tank">Tank</option>
      <option value="conflagration">Conflagration</option>
      <option value="poison">Poison</option>
      <option value="nukes">Micro-nukes</option>
      <option value="trickery">Trickery</option>
      <option value="corrosive">Corrosive</option>
      <option value="dismemberment">Dismemberment</option>
    </select>
  </div> 

</div>
~~~

# Now, we'll add a button

* Again, jQuery Mobile will create a styled, mobile-ish button from this `<input>` field.

## Code 

~~~ {.html}
      <option value="dismemberment">Dismemberment</option>
    </select>
  </div> 
  <input type="button" value="I got one!" id="got-one" data-theme="b" />
</div>
~~~

# Dead Zombie Storage

When a soldier nabs a zombie by tapping the "I Got One!" button, we'll need a place to display the info about that poor zombie.

~~~ {.html}
</div> 
<input type="button" value="I got one!" id="got-one" data-theme="b" />
<ul data-role="listview" data-inset="true" id="zombielist">
</ul>
</div> <!-- /End <div data-role="content"> -->
~~~

`data-role="listview"` indicates to jQuery Mobile that this list should be styled as a list widget.

# A list widget what now?

So...each added zombie, ultimately, will get added as a `<li>` element in that empty `<ul>` we just added.

### jQuery Mobile Turns This

~~~ {.html}
<ul data-role="listview" data-inset="true" id="zombielist">
  <li><img src="icons/z2.png" alt="Killed by micro-nukes" /><h3>Zombie Nabbed!</h3>
  <p><strong>01/18/12 13:44</strong></p>
  <p>Coordinates: 40.7678494, -73.9853328</p></li>
</ul>
~~~

### Into this

![](images/06-li-example.png)

# And now we have a starting point

## Figure: Screen shot of our current page

![](images/06-starting-point.png)

# A quick aside about browser support

![](images/06-no-js.png)

* By its nature, jQuery Mobile practices enthusiastic progressive enhancement
* jQuery Mobile works in browsers that do not support JavaScript
* However, our functionality requirements for the "I got one!" app effectively require JavaScript

# Warning: JavaScript ahead

## Figure: ALERT!

![](images/06-alert.png)

# Adding the JavaScript

Now we can drop in some custom JavaScript that makes this go:

~~~ {.html}
<script src="zombie.js"></script>
~~~

The curious can open up `zombie.js` and follow along as I confuse you through the next several slides!

# Our JavaScript

Our JavaScript is in *two* main parts:

* A `window.zombieManager` object that defines the behavior of our zombie-nabbing app and updates the displayed list and whatnot.
* Some initialization hoo-hah that happens on jQuery Mobile's `pageinit` event.

# Working with jQuery Mobile events

* When the page is done loading and the widgets have been marked up...

~~~ {.javascript}
$("#nab-zombie").live('pageinit', function() {
  // Initialize our web app and do some cool things
  zombieManager.init();
});
~~~

# The meat of zombie.js


~~~{.javascript}
// This is a comment
window.zombieManager = function() {
  var zombies       = new Array(),
  zombie_icons      = { },
  init              = function() { },
  addZombie         = function(zombieWhen, zombieWhere, zombieHow) { },
  showZombies       = function() { },
  displayZombie     = function(zombie, zombieID) { },
  addResetButton    = function() { },
  resetZombies      = function() { };
  
  return {
    init:         init,
    addZombie:    addZombie
  };
  
};
~~~

# Settin' things up

~~~{.javascript}
init = function() {
    // Is Geolocation supported?
    var geoHappy = geo_position_js.init();
    $("#got-one").click(function() {
      var now = new Date(),
          how = $("#how-zombie").val();
      if (geoHappy) {
        geo_position_js.getCurrentPosition(function(position) {
          zombieManager.addZombie(now, position, how);
        }, function(error) {
          console.log("Geolocation error: " + error.message)
          zombieManager.addZombie(now, null, how);
        });
      } else { // It's also OK to add a zombie w/o location data
        zombieManager.addZombie(now, null, how);
      }
    });
    showZombies();
  } // ...
~~~


# Managing our Zombies

We need a way to:

* Add a new dead zombie
* Store our dead zombies
* Show dead zombie details (in a `<li>` added to the `<ul#zombielist>`)
* Reset zombies

# Adding a Dead Zombie

~~~ {.javascript}
addZombie = function(zombieWhen, zombieWhere, zombieHow) {
    zombies[zombies.length] = {
      when      : zombieWhen.valueOf(),
      where     : zombieWhere,
      how       : zombieHow
    };
    showZombies();  
},
~~~

Let's go look at `showZombies`...

# Showing the dead Zombies


~~~ {.javascript}
showZombies = function() {
  var $zombielist = $('#zombielist'), $zombieRow;
  for(var i = 0; i < zombies.length; i++) {
    var zombieWhen = new Date(zombies[i].when),
        zombieID   = 'zombie-' + zombieWhen.format('mdyhis'); // Using date.format.js
    if (!$("#" + zombieID).length) {
      $zombieRow = displayZombie(zombies[i], zombieID);
      $zombielist.prepend($zombieRow);
    }
  }
  if (zombies.length && !$('#zombie-reset').length) {
    addResetButton();
  }

  $('#zombielist').listview('refresh');
},
~~~

## Speaker Notes

* Have to refresh the listview (for the `<ul#zombielist>`) after altering elements in the list.

# Building a row for the dead zombie

We're trying to emulate this markup:

~~~ {.html}
<ul data-role="listview" data-inset="true" id="zombielist">
  <li><img src="icons/z2.png" alt="Killed by micro-nukes" /><h3>Zombie Nabbed!</h3>
  <p><strong>01/18/12 13:44</strong></p>
  <p>Coordinates: 40.7678494, -73.9853328</p></li>
</ul>
~~~

# displayZombie

## Code

~~~{.javascript}
displayZombie = function(zombie, zombieID) { 
  var $zombieImg, coords,
    $zombieRow = $('<li></li>').addClass('zombie').attr('id', zombieID),
    zombieWhen   = new Date(zombie.when);
    
  if (zombie.how && zombie_icons[zombie.how]) {
    $zombieImg = $("<img>").attr(
      { src :  'icons/' + zombie_icons[zombie.how], alt :  'How it died: ' + zombie.how });
    $zombieRow.append($zombieImg);
  }
  $zombieRow.append( 
    '<h3>Zombie Nabbed!</h3><p><strong>'  + zombieWhen.format('m/d/y H:i') + '</strong></p>'
  );    
  if (zombie.where && zombie.where.coords) {
    coords = zombie.where.coords;
    $zombieRow.append('<p>Coordinates: '  + coords.latitude + ', ' + coords.longitude + '</p>');
  }
  return $zombieRow;
},
~~~


# Resetting Zombies

Now we can add zombies and show zombies. What if someone wants to start over and reset their zombies?

~~~ {.javascript}
resetZombies = function() {
  zombies = [];
  $('li.zombie').remove();
  $('#zombielist').listview('refresh');
};
~~~

# Try it out!

## Figure: "I got one!" on an Android

![](images/i-got-one-screenshots/android-list.png)

# Cool, yeah, maybe, OK, but kind of useless


* As soon as the page is reloaded, all of the zombies go away.
* We need a way to store found zombies on the client.

### How about a device API?

# localStorage

![](images/06-storage.png)

There is another standard device API for storing simple string key-value pairs on the client: *localStorage*.

### However, we need to store more than strings...

# Leaning on our brothers again

## Lawnchair

![](images/06-lawnchair.png)

* Lawnchair is an open source, simple JSON storage utility that can store data on the client.
* Several adapters are available for Lawnchair, including one that uses localStorage underneath (DOM adapter).

# Let's kick up a Lawnchair, yeah?

* Include the scripts `Lawnchair.js` and `dom.js` in our document's `<head>`.
* Then: Instantiate the Lawnchair. Do this right after initializing the `zombies` array in the `zombieManager` function.

~~~ {.javascript}
window.zombieManager = (function() {
  var zombies       = new Array(),
  zombieChair       = Lawnchair({name: 'zombies'}, function() {}),
  zombie_icons      = { ... }
  // ...
~~~~

# Update the addZombie method

Save the updated zombies array...

~~~ {.javascript}
addZombie = function(zombieWhen, zombieWhere, zombieHow) {
    zombies[zombies.length] = {
      when      : zombieWhen.valueOf(),
      where     : zombieWhere,
      how       : zombieHow
    };
    zombieChair.save({key: 'zombies', value : zombies });
    showZombies();  
},
~~~

# Update the init method

We want to check the zombieChair for stored dead zombies when we initialize...

~~~{.javascript}
init = function() {
  // Is Geolocation supported?
  var geoHappy = geo_position_js.init();
  $("#got-one").click(function() {
    // ...    
  });
  zombieChair.get('zombies', function(zombiesOnIce) {
    if (zombiesOnIce) {
      zombies = zombiesOnIce.value;
    }
  });
  showZombies(); 
},
~~~

# And finally...update the resetZombies method

Nuke the zombieChair to remove all of the stored zombies...

~~~{.javascript}
resetZombies = function() {
  zombies = [];
  zombieChair.nuke();
  $('li.zombie').remove();
  $('#zombielist').listview('refresh');
};
~~~

# Take it for a spin

## Figure: Screen shot of I Got One!

![](images/06-screen.png)

# As always, there are gotchas

* Date objects don't unserialize correctly from Lawnchair (so we are storing a string representation of a Date object).
* jQM `pagecreate` and `pageinit` events can be a bit tricky.

# Getting the final mile

Sometimes the zombies you face are not vulnerable to the mad skills you possess. Some things just aren't yet attainable on the mobile web, which is why [desperate times call for desperate measures](07-desperate-times.html).