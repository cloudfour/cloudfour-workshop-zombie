% Release the Hounds!
% Responsive Web Design

# You already have some blunt weapons

## Reverse: Blunt Weapons

![](images/03-sharpen.png)

## Let's sharpen them

It may seem like we're still mired on the desktop with all that Sigma Stronghold optimization.

### It's time to get mobile

# Oh dear, that's ugly, isn't it?

![](images/sigma-site-screenshots/iphone-broken-2.jpg)

![](images/sigma-site-screenshots/android-broken.png)


## Speaker Notes

We've prioritized our content just fine, but the current structure of the Sigma Stronghold web site is a *fixed-width, rigid layout*. That is not going to adapt in the face of the zombie gadget crisis. What do we do?

# We adapt!

When the going gets tough, we kill zombies.

## Illustration: Pew Pew

![](images/03-pew.png)

# Lesson 1: Quarantine never works

## Illustration: Quarantine Never Works

![](images/03-quarantine-never-works.png)

## Speaker Notes

* We have to relinquish our false sense of control and set our content free.
* We don't get to *decide* or even reliably *know* our user's screen sizes.
* If we try to quarantine the zombies with rigid, pixel-perfect designs, they'll just be more pissed off when they ultimately escape.

Expound on limits of control.

# Responsive Web Design (RWD)

Responsive Web Design (RWD) is a set of techniques for adapting an experience for the user's environment, instead of using a rigid, one-size-fits-all type of structure.

RWD is based upon the notion of creating a fluid, proportional layout. RWD layouts *scale, flex and adapt* to *flow comfortably* in the user's browser, whatever size or shape it might be at the moment.

## Speaker Notes

# RWD Elements

RWD is driven by three main technical pieces:

1. Fluid CSS layouts
2. CSS3 Media Queries
3. Responsive Images and Objects

# A Bit of Recon


## Reverse: Layout

![](images/03-sigma-site-structure.png "Site structure")

Right now, the Sigma Stronghold web site's structure is like this.

* `body > div` that contains all content: 920px
* `#container` (all content is inside of this `div`): 900px
* `#main`: 500px
* `#sidebar`: No specific width set, but a left margin of 570px

## Speaker Notes

* Step 0: A bit of Recon. Open the [current version of](../rucksack/missions/02-fluid-layout) of the web site in your browser.
* Layout is handled by `styles.css`

# What's so bad about about layouts defined in fixed units?

## Illustration: Portals into content

![](images/03-portals.png)

# Accounts for this

## Figure: Cut off site on mobile

![](images/sigma-site-screenshots/android-broken.png "Oopsie")

# Fluid layouts, on the other hand...

## Illustration: Fluid Layouts Scale

![](images/03-fluid-scales.png)

## Speaker Notes

Pause here. Reconnect idea of fluid layouts back to being a) first step in Responsive, b) having some meaning/purpose.

"So if we have decided that we want to convert the Sigma Stronghold site to a fluid layout..."

...How would we do that?

# Converting Pixel-based Designs to Fluid

## Figure: Fluid Formula

![](images/03-fluid-formula.png)

## The Fluid Formula

To convert a layout element with pixel widths be fluid, we apply the fluid formula.

# The Fluid Formula Exposed

## Figure: The fluid formula

![](images/03-formula-applied.png)

# Example

* Say you have a 720-pixel-wide left column
* Say your entire layout width is 960px
* To convert the 720px width to a proportional, fluid one, apply the fluid formula

## Speaker Notes

* Use a piece of paper/flip chart to draw out this equation
* Answer is 75%;

# Result = Target / Context

## Context

Let's talk about *context* a bit, yes?

#### TARGET / CONTEXT = RESULT

In our example, the context was the full layout width—960px

# Context changes

![](images/03-context.png)

* A `div` of 250px wide
* Inside of a 500px `div`
* Overall content width of 750px
* The 500px `div` is the context

#### 250px / 500px = 50% 

#### --**not** 250px / 750px = 33.33%--

# Applying the fluid formula

## Reverse: Fluid Formula Application

![](images/03-formula-applied.png)

## Current metrics of Sigma Stronghold site

* `body > div` that contains all content: 920px
* `#container` (all content is inside of this `div`): 900px
* `#main`: 500px
* `#sidebar`: No specific width set, but a left margin of 570px

# Applying the formula to the \#main div

![](images/03-main.png)

Let's see how this plays out on the `div#main` on the Sigma Stronghold site, shall we?

# Example of the formula

## Illustration: A precise example of the formula

![](images/03-formula-example.png)

# Or, roughly

## Illustration: Approximation of formula results

![](images/03-formula-approximate.png)

## Speaker Notes

Talk about wiggle room in math. Rounding down.

# Let's start from the top

## Reverse: Container widths

![](images/03-containers.png)

Let's start with the first items in our list:

* `body > div` that contains all content: 920px
* `#container` (all content is inside of this `div`): 900px

### Mission: Convert the Sigma Stronghold web site to a fluid layout.

## Speaker Notes

* We're making the design executive decision that we never want the content of the page to be wider than these measurements. The design can scale down but 920px and 900px are as large as these elements should ever appear. 
* This is a bit of a curveball on the normal, full-fluid approach, but, hey, the web is a crazy place. And this is still viable, as long as you're OK with the content being a bit narrow on very wide screens.
* It's all about give and take and evaluation.

# Let's dive in...

Open the `styles.css` file linked to in Step 1 of your Field Notes.

> `rucksack/missions/02-fluid-layout/styles.css`

We don't have to throw the undead baby out with the bathwater here. We can change some CSS rules in a targeted way to get fluid!

## Speaker Notes

* We're on `Step 1` now. Open this CSS file in a text editor if you want to play along.
* The first thing we're going to do is establish the width of the layout overall. In a lot of cases, this is effectively 100%, but...
* To do this, we'll want to edit the rules for `body > div` and `#container`.

# Revising our CSS

To achieve the goal of the overall content width—never wider than 920px overall—we'll use the `max-width` CSS property.

### Instead of

~~~~ {.css}
body > div {
  width: 920px;
  ...
 }
~~~~

### Use

~~~~ {.css}
body > div {
 max-width: 920px;
 ...
}
~~~~

## Speaker Notes

* The rule for `body > div` is ~ line 50 in the file.
* As of now, the layout will not flex narrower than 920px. 


# Revising our CSS, cont.

### Instead of

~~~ {.css}
#container {
  background: black;
  padding: 10px;
  width: 900px;
  clear: both; }
~~~

### Use

~~~ {.css}
#container {
  background: black;
  padding: .625em;
  max-width: 900px;
  clear: both; }
~~~


## Speaker Notes

* Note the padding conversion to `em`.
* Similar to the containing div, we're making this never wider than 900px. That's an absolute. Sometimes there are absolutes.
* Around line 108ish of file.


# Making the content areas stretchy and fluid

## Illustration: The containers scale down comfortably now

![](images/03-containers-scale.png)

# Onward!

We've already done the sloppy math on `#main` and decided it should be 60% wide.

### Instead of

~~~ {.css}
    #main {
      margin-left: 10px;
      clear: left;
      float: left;
      width: 550px;
      ...
    }
~~~

### use

~~~ {.css}
    #main {
      margin-left: 1.5%;
      clear: left;
      float: left;
      width: 60%;
      ...
    }
~~~

## Speaker Notes

* Rule for `#main` at Line ~121 in `styles.css`

# What about the sidebar?

## Reverse: Sidebar

![](images/03-sidebar.png)

## The sidebar currently has a left margin of 570px

570px is within the context of the `#container` element. So, to convert it to fluid, we apply the formula:

#### 570 (target) / 900 (context) ~= 63.5%

(It's closer to 63.25%, but we have a little bit of wiggle room in our math right now)

# Margins can be proportional, too

### Instead of

~~~ {.css}
#sidebar {
  margin-left: 570px; 
  }
~~~

### Use

~~~ {.css}
#sidebar {
  margin-left: 63.5%;
}
~~~

## Speaker Notes

* `#sidebar` is at line 147 of `styles.css`.

# In summary...

## Done

* We edited the rules for `body > div`, `#container`, `#main` and `#sidebar`.
* `body > div` and `#container` retain a pixel-based width, but it is a `max-width`. These containers scale *down* but not up. This was a design decision.
* `#main` and `#sidebar` and their padding and margin widths are proportional now. These elements scale within their parent element `#container`.

## Speaker Notes

* End of Step 1 in Field Notes
* Adapted fluid layout
* If you like, you can find the finished version of the fluid CSS in your rucksack (see field notes for details).

# So, what did that get us?

![](images/sigma-site-screenshots/iphone-fluid-broken.jpg "Oh, dear") 

![](images/sigma-site-screenshots/iphone-fluid-broken-2.jpg "Oh, dear")


### What was the point of that? Still looks wretched on mobile

# That's where Media Queries come in

## Reverse: Media Queries

![](images/03-media-queries.png)

Fluid grids are the first tenet of RWD. Now it's time for the vital second tenet: 

## Media Queries!

#### CSS3 media queries let you *selectively apply CSS* based upon the present environment of the user's browser.

# Media Types

Media types have been around a while. It's how we make print stylesheets, e.g.

~~~ {.html}
<link rel="stylesheet" media="print" href="print.css">
~~~

# Media Features

#### Media types have media features.

For example, `width` is a media feature of several media types, including `screen`, `print` and more.

`orientation` is a media feature of various bitmap media types.

# Logical expressions

#### CSS media queries evaluate the current value of *media features* in logical expressions to determine whether to apply the enclosed CSS.

~~~ {.css}
@media screen and (min-width: 600px) {
  // In browsers that support media queries,
  // rules in here will only be applied if the
  // query expression evaluates as true
}
~~~

### Also

~~~ {.html}
<link rel="stylesheet" media="screen and (min-width:600px)" href="thing.css">
~~~

## Speaker Notes

* @import syntax also supported.
* Mention that `width` is the media feature; `min-width` is a query on that feature.

# So?

![By using media queries, we can apply different CSS in different situations](images/sigma-site-screenshots/iphone-fluid-broken.jpg "Oh, dear") 

![](images/sigma-site-screenshots/iphone-fluid-broken-2.jpg "Oh, dear")


# Here's one way we could do it

### For narrower screens

* Instead of two columns of content, we could have a single column.
* And instead of tabbed navigation, we could make the navigation elements bigger and more tap-able.
* Let's say that any screen narrower than 600px should have a single-column view of the content, and vertical navigation items.

# Something like this...

## Illustration: Adaptive Layout

![](images/03-responsive-layout.png)

## Speaker Notes

Choosing a breakpoint at 600px somewhat arbitrarily.

Now we are moving into step 2 of the hands on work.

1. View fluid site in browser
2. Open the media query editing file. We'll do this together. `rucksack/missions/03-responsive/media-query.css`. Note that this is NOT the `styles.css` file.



# Constructing our media query

We want to create a set of CSS rules that only get applied to browser windows narrower than 600 px. That looks like:

~~~ {.css}
@media screen and (max-width:600px) {
  // Rules for narrow screens here
}
~~~

# And what goes inside of there?

First, let's make the two content containers span the full width of their parent container and not float:

~~~ {.css}
@media screen and (max-width:600px) {
  #main, #sidebar {
    width: 100%;
    float: none;
    clear: both;
    margin: 0; 
  }
}
~~~

# Moonset

That moon image is simply too huge and wonky for mobile. Let's kill it.

~~~ {.css}
@media screen and (max-width:600px) {
  ...   // #main, #sidebar
  body {
    background-image: none; 
  }
}
~~~

# Navigational Aids

Let's make the navigation vertical and tap-able.

~~~ {.css}
@media screen and (max-width:600px) {
  ... // #main, #sidebar, body
  #header nav ul li {
    float: none;
    clear: both;
    width: 100%;
    margin: .5em 0; 
  }
  #header nav ul li a {
      margin: 0;
      padding: .75em; 
  }
}
~~~

# A question of taste

Often as screen sizes change, proportions feel a bit different. 

## Code

~~~ {.css}
@media screen and (max-width:600px) {
  ... // #main, #sidebar, body, #header nav...
  #header {
    padding: 1em 0; }
  #header h1, #header h3 {
    padding: 0 .375em; }
  h1 {
    font-size: 1.75em;
    line-height: 1.25em; }
  h3 {
    font-size: 1.1em;
    line-height: 1.2em; }
  p {
    font-size: .9em;
    line-height: 1.4em; }
}
~~~

## Speaker Notes

* Put the ending brace on the same line for space reasons here.

# Wrapping it up...

* Adding the CSS in the media query to the end of the `styles.css` file.
* Reviewing [the result](../rucksack/victories/03-media-queries) in a browser.

## Speaker Notes

Remember, we've been editing a file that just contains the media query piece of the CSS.

# And...check it out...

## Figure: iPhone Responsive

![](images/sigma-site-screenshots/iphone-responsive-2.jpg)

# And...

## Figure: Android responsive

![](images/sigma-site-screenshots/android-responsive.png)

# But...let's think about this a bit more.

## Illustration: Thinking

![](images/03-thinking.png)

# (X) First

* Mobile First!
* Content First!
* Baseline First!

# Pause. Content.

* Content- and mobile-first approach
* More subtle approach that focuses our thinking
* Instead of adapting downward for simpler browsers/devices, more adherance to progressive enhancement

# Inverting the picture

Stepping back and thinking what we want our baseline experience to be.

* Let's make the single-column width the default layout and *enhance* to the two-column view and the background image.
* *But*, let's make the tabbed navigation default (not the vertical).

# Thinking through some breakpoints

* Let's also fine-tune the _breakpoints_.
    * Let's make the vertical navigation appear for windows <= 550px.
    * Let's make the double column view kick in and the moon background appear for windows >= 750px.
    
## Speaker Notes

Intro to step 3. Closing file, opening the `styles.css` file in 04-mobile-first.


# CSS Restructuring

## Code

~~~ {.css}
// Baseline CSS
// Single column layout for #main and #sidebar
// No background moon image
// Tabbed nav (horizontal)

@media screen and (min-width: 750px) {
  // Two-column view
  // Moon background image
  // Proportion adjustments for padding and fonts
}
@media screen and (max-width: 550px) {
  // Vertical navigation
  // Proportion adjustments for padding and fonts
}
~~~

# Building the baseline

#### Instead of

~~~ {.css}
body {
  background-color: black;
  color: white;
  font: 100% "Special Elite";
  background-image: url(images/moon.jpg);
  background-repeat: no-repeat;
}
~~~

#### Use

~~~ {.css}
body {
  background-color: black;
  color: white;
  font: 100% "Special Elite";
}
~~~

## Speaker Notes

`body` rule is near the top of the `styles.css` file.

# Baseline (cont.)

#### Instead Of

~~~ {.css}
body > div {
  max-width: 920px;
  margin: 0 auto;
  border-color: rgba(255, 255, 255, 0.2);
  border-width: 0px 7px;
  border-style: solid;
}
~~~

#### Use

~~~ {.css}
body > div {
  max-width: 920px;
  margin: 0 auto; 
}
~~~

## Speaker Notes

`body > div` is around line 50.

# Baseline (cont.)

#### Instead of

~~~ {.css}
#main {
  margin-left: 1.5%;
  clear: left;
  float: left;
  width: 60%;
  /// ... And so on ...
}
~~~

#### Use

~~~ {.css}
#main {
  width: 100%;
  float: none;
  clear: both;
  margin: 0;
  /// ... And so on ...
}
~~~

## Speaker Notes

`#main` is at about line 121. Note that it is a long rule and we're not showing all of it.

# Baseline (cont.)

#### Instead of

~~~ {.css}
#sidebar {
  margin-left: 63.5%;
}
~~~

#### Use

~~~ {.css}
#sidebar {
  float: none;
  clear: both;
  margin: 0; 
}
~~~

## Speaker Notes

* Line 147 in the file is the `#sidebar` rule.
* We are now complete with step 3, reworking the baseline. Find help in the snippet section.
* **Now**, delete the 600px media query and its contents from the bottom of the file. We're going to replace it with two media queries. This starts at line 169.

# A breakpoint for wider screens

## We need a media query for screens of a maximum width of 750px...anyone? Bueller?

## Speaker Notes

* Moving into step 3 in our field notes

# A breakpoint for wider screens

## Code

~~~ {.css}
@media all and (min-width:750px) {
  /* Adding back in the background image */
  body {
    background-image: url(images/moon.jpg);
    background-repeat: no-repeat;
  }

  /* Here's a border */
  body > div {
    border-color: rgba(255, 255, 255, 0.2);
    border-width: 0px 7px;
    border-style: solid;
  }

  /* Float #main left; make it 60% width of its parent container */
  #main {
    margin-left: 1.5%;
    clear: left;
    float: left;
    width: 60%;
  }

  /* A fluid left margin for a right-aligned #sidebar */
  #sidebar {
    margin-left: 63.5%;
    clear: none;
  }
}
~~~

## Speaker Notes

* Challenge folks to create a media query for min-width 750px.

# A narrower breakpoint

## Code

~~~ {.css}
@media all and (max-width:550px) {
  /* Here is the stacked navigation */
  #header nav ul li {
    float: none;
    clear: both;
    width: 100%;
    margin: .5em 0;
  }
  #header nav ul li a {
    margin: 0;
    padding: .75em;
  }
  /* Padding and font adjustments */
  h1 {
    font-size: 1.75em;
    line-height: 1.25em;
  }
  h3 {
    font-size: 1.1em;
    line-height: 1.2em;
  }
  p {
    font-size: .9em;
    line-height: 1.4em;
  }
  #header {
    padding: 1em 0;
  }
  #header h1, #header h3 {
    padding: 0 .375em;
  }
}
~~~


# We're now mobile-first

Look at that, soldier! We're thinking mobile- and content-first. We're adapting our requirements and our layout based on the yins and yangs of project and customer requirements. Balance is key.

## Speaker Notes

* Now look at [../rucksack/victories/04-mobile-first](The site)


# And now we ride off into the Zombie-tinted sunset?

## Illustration: Zombie-tinted sunset

![](images/04-sunset.png)

# One more thing...

We can go more fluid. Did you notice that even though we have made much of Sigma Stronghold's layout fluid, our media queries are in pixels?

## Also, WTF is a pixel, anyway?


# Font Size Baseline

### 1em = 100% ~= 14pt ~=16px



# So?


![](http://cloudfour.github.com/figures/ems/medium-borken.jpg)

![](http://cloudfour.github.com/figures/ems/medium-ems.jpg)

# Conversion of our media queries

* 750px in `ems` ~= (750px / 16px) ~= `46.875em`
* 500px in `ems` ~= (500px / 16px) ~= `31.25em`

## Updated Media Queries

~~~{.css}
@media all and (min-width: 46.875em) { }

@media all and (min-width: 31.25em) { }
~~~

## Speaker Notes

* [Final version](../rucksack/victories/05-proportional-media-queries)
* This is in the victories folder under `05-proportional-media-queries`


# Onward!

Zombies are known for not being the easiest things to kill. What do we do when we start facing [bloodier battles](04-bloodier-uprisings.html)?