% Zombie 101: Release the Hounds!
% Jason Grigsby and Lyza Danger Gardner

# You already have some blunt weapons
![](images/03-sharpen.png)

## Let's sharpen them

It may seem like we're still mired on the desktop with all that Sigma Stronghold optimization.

### It's time to get mobile

# Oh dear, that's ugly, isn't it?

![](images/sigma-site-screenshots/iphone-broken-2.jpg) ![](images/sigma-site-screenshots/android-broken.png)

The current structure of the Sigma Stronghold web site is a *fixed-width, rigid layout*. That is not going to adapt in the face of the zombie gadget crisis. What do we do?

# We adapt!

When the going gets tough, we kill zombies.

![](images/03-pew.png)

# Lesson 1: Quarantine never works

![](images/03-quarantine-never-works.png)

* We have to relinquish our false sense of control and set our content free.
* We don't get to *decide* or even reliably *know* our user's screen sizes.
* If we try to quarantine the zombies with rigid, pixel-perfect designs, they'll just be more pissed off when they ultimately escape.

## Speaker Notes

Expound on limits of control.

# Responsive Web Design (RWD)

Responsive Web Design (RWD) is a technique, championed by Ethan Marcotte (@beep), that argues adapting an experience for the user's environment, instead of using a rigid, one-size-fits-all type of structure.

RWD is based upon the notion of creating a fluid, proportional layout (instead of pixel- or absolute-unit-based layouts). RWD layouts *scale, flex and adapt* to *flow comfortably* in the user's browser, whatever size or shape it might be at the moment.

# RWD Elements

RWD is driven by three main technical pieces:

* Fluid CSS layouts
* CSS3 Media Queries
* Responsive Images and Objects

# RWD Part I: Fluid CSS layouts

![](images/03-sigma-site-structure.png "Site structure")

Right now, the Sigma Stronghold web site's structure is like this.

* `body > div` that contains all content: 920px
* `#container` (all content is inside of this `div`): 900px
* `#main`: 500px
* `#sidebar`: No specific width set, but a left margin of 570px

# What's so bad about fixed layouts?

## Figure: Portals into content

![](images/03-portals.png)

# Accounts for this

## Figure: Cut off site on mobile

![](images/sigma-site-screenshots/android-broken.png "Oopsie")

# Fluid layouts, on the other hand...

## Figure: Fluid Layouts Scale

![](images/03-fluid-scales.png)

# The fluid formula

## Figure: Fluid Formula: Result = Target / Context

![](images/03-fluid-formula.png)

# Result = Target / Context

## Result

![](images/03-result.png)

Proportional units

# Result = Target / Context

## Target

![](images/03-target.png)

Our original, absolute units

# Result = Target / Context

![](images/03-context.png)

## Context

Let's talk about *context* a bit, yes?

# Applying the fluid formula

![](images/03-formula-applied.png)

## Current metrics of Sigma Stronghold site

* `body > div` that contains all content: 920px
* `#container` (all content is inside of this `div`): 900px
* `#main`: 500px
* `#sidebar`: No specific width set, but a left margin of 570px

# Applying the formula to the \#main div

![](images/03-main.png)

Let's see how this plays out on the `div#main` on the Sigma Stronghold site, shall we?

# Example of the formula

## Figure: A precise example of the formula

![](images/03-formula-example.png)

# Or, roughly

## Figure: Approximation of formula results

![](images/03-formula-approximate.png)

# Let's start from the top

![](images/03-containers.png)

Let's start with the first items in our list:

* `body > div` that contains all content: 920px
* `#container` (all content is inside of this `div`): 900px

## We're going to play a little twist on pure fluid layouts here

It is viable to mix fixed and fluid units in some ways.

## Speaker Notes

* We're making the design executive decision that we never want the content of the page to be wider than these measurements. The design can scale down but 920px and 900px are as large as these elements should ever appear. 
* This is a bit of a curveball on the normal, full-fluid approach, but, hey, the web is a crazy place. And this is still viable, as long as you're OK with the content being a bit narrow on very wide screens.
* It's all about give and take and evaluation.

# Let's dive in...

Open your `styles.css` file in the Sigma Stronghold web site folder.

### Let's convert this thing to scale and adapt to different devices and browsers

We don't have to throw the undead baby out with the bathwater here. We can change some CSS rules in a targeted way to get fluid!

# Revising our CSS

To achieve the goal of the overall content width—never wider than 920px overall—we'll use the `max-width` CSS property.

### Instead of

~~~~ {.css}
body > div {
  width: 920px;
  ...
 }
~~~~

### Use

~~~~ {.css}
body > div {
 max-width: 920px;
 ...
}
~~~~

## Speaker Notes

* This constrains our outer container to never exceed 920px—but it can certainly be smaller.
* Strictly speaking, this div is probably not necessary.
* `body > div` and `div#main` are centered in the browser window by way of the `margin: 0 auto`.

# Revising our CSS, cont.

### Instead of

~~~ {.css}
#container {
  zoom: 1;
  background: black;
  padding: 10px;
  width: 900px;
  clear: both; }
~~~

### Use

~~~ {.css}
#container {
  zoom: 1;
  background: black;
  padding: .625em;
  max-width: 900px;
  clear: both; }
~~~


## Speaker Notes

* If folks are curious, the `zoom` property is part of a clearfix for IE.
* Note the padding conversion to `em`.
* Similar to the containing div, we're making this never wider than 900px. That's an absolute. Sometimes there are absolutes.


# Making the content areas stretchy and fluid

## Figure: The containers scale down comfortably now

![](images/03-containers-scale.png)

# Onward!

We've already done the sloppy math on `#main` and decided it should be 60% wide.

### Instead of

~~~ {.css}
    #main {
      zoom: 1;
      margin-left: 10px;
      clear: left;
      float: left;
      width: 550px;
      ...
    }
~~~

### use

~~~ {.css}
    #main {
      zoom: 1;
      margin-left: 1.5%;
      clear: left;
      float: left;
      width: 60%;
      ...
    }
~~~

# What about the sidebar?

## The sidebar currently has a left margin of 570px

![](images/03-sidebar.png)

570px is within the context of the `#container` element. So, to convert it to fluid, we apply the formula:

#### 570 (target) / 900 (context) ~= 63.5%

(It's closer to 63.25%, but we have a little bit of wiggle room in our math right now)

# Margins can be proportional, too

### Instead of

~~~ {.css}
#sidebar {
  margin-left: 570px; 
  }
~~~

### Use

~~~ {.css}
#sidebar {
  margin-left: 63.5%;
}
~~~

# In summary...

* We edited the rules for `body > div`, `#container`, `#main` and `#sidebar`.
* `body > div` and `#container` retain a pixel-based width, but it is a `max-width`. These containers scale *down* but not up. This was a design decision.
* `#main` and `#sidebar` and their padding and margin widths are proportional now. These elements scale within their parent element `#container`.
* If you like, you can find the finished version of the fluid CSS in your rucksack (see field notes for details).

# So, what did that get us?

![](images/sigma-site-screenshots/iphone-fluid-broken.jpg "Oh, dear") ![](images/sigma-site-screenshots/iphone-fluid-broken-2.jpg "Oh, dear")

It's proportional, all right.

### What was the point of that? Still looks wretched on mobile

# That's where Media Queries come in

![](images/03-media-queries.png)

Fluid grids are the first tenet of RWD. Now it's time for the vital second tenet: 

## Media Queries!

#### CSS3 media queries let you *selectively apply CSS* based upon the present environment of the user's browser.

# Media Types

Media types have been around a while. It's how we make print stylesheets, e.g.

~~~ {.html}
<link rel="stylesheet" media="print" href="print.css">
~~~

## Speaker Notes

Other popular media types

* screen
* projection

# Media Features

#### Media types have media features.

For example, `width` is a media feature of several media types, including `screen`, `print` and more.

`orientation` is a media feature of various bitmap media types.

# Logical expressions

#### CSS media queries evaluate the current value of *media features* in logical expressions to determine whether to apply the enclosed CSS.

~~~ {.css}
@media screen and (min-width: 600px) {
  // In browsers that support media queries,
  // rules in here will only be applied if the
  // query expression evaluates as true
}
~~~

### Also

~~~ {.html}
<link rel="stylesheet" media="screen and (min-width:600px)" href="thing.css">
~~~

## Speaker Notes

* @import syntax also supported.
* Mention that `width` is the media feature; `min-width` is a query on that feature.

# So?

![](images/sigma-site-screenshots/iphone-fluid-broken.jpg "Oh, dear") ![](images/sigma-site-screenshots/iphone-fluid-broken-2.jpg "Oh, dear")

By using media queries, we can apply different CSS in different situations.

The problem with the Sigma Stronghold site on narrow screens is that the columns are too small and the nav feels too cramped.

## Speaker Notes

* The most popular application of this is to adapt layout depending on the current window width, which is what we are going to do.

# Let's make this more responsive

* Let's make the site layout more *responsive* by adapting it for narrower windows.

    * Instead of two columns of content, let's have a single column.
    * And instead of tabbed navigation, let's make the navigation elements bigger and more tap-able.

# First whack at media queries

Let's say that any screen narrower than 600px should have a single-column view of the content, and vertical navigation items.

## Figure: Adaptive Layout

![](images/03-responsive-layout.png)

## Speaker Notes

Choosing a breakpoint at 600px somewhat arbitrarily.

# Constructing our media query

We want to create a set of CSS rules that only get applied to browser windows narrower than 600 px. That looks like:

~~~ {.css}
@media screen and (max-width:600px) {
  // Rules for narrow screens here
}
~~~

# And what goes inside of there?

First, let's make the two content containers span the full width of their parent container and not float:

~~~ {.css}
@media screen and (max-width:600px) {
  #main, #sidebar {
    width: 100%;
    float: none;
    clear: both;
    margin: 0; 
  }
}
~~~

# Moonset

That moon image is simply too huge and wonky for mobile. Let's kill it.

~~~ {.css}
@media screen and (max-width:600px) {
  ...   // #main, #sidebar
  body {
    background-image: none; 
  }
}
~~~

# Navigational Aids

Let's make the navigation vertical and tap-able.

~~~ {.css}
@media screen and (max-width:600px) {
  ... // #main, #sidebar, body
  #header nav ul li {
    float: none;
    clear: both;
    width: 100%;
    margin: .5em 0; 
  }
  #header nav ul li a {
      margin: 0;
      padding: .75em; 
  }
}
~~~

# A question of taste

Often as screen sizes change, proportions feel a bit different. 

~~~ {.css}
@media screen and (max-width:600px) {
  ... // #main, #sidebar, body, #header nav...
  #header {
    padding: 1em 0; }
  #header h1, #header h3 {
    padding: 0 .375em; }
  h1 {
    font-size: 1.75em;
    line-height: 1.25em; }
  h3 {
    font-size: 1.1em;
    line-height: 1.2em; }
  p {
    font-size: .9em;
    line-height: 1.4em; }
}
~~~

## Speaker Notes

* Put the ending brace on the same line for space reasons here.

# And...check it out...

## Figure: iPhone Responsive

![](images/sigma-site-screenshots/iphone-responsive-2.jpg)

# And...

## Figure: Android responsive

![](images/sigma-site-screenshots/android-responsive.png)

# Mobile first RWD

* Content- and mobile-first approach
* More subtle approach that focuses our thinking
* Instead of adapting downward for simpler browsers/devices, more adherance to progressive enhancement

# Inverting the picture

Stepping back and thinking what we want our baseline experience to be.

* Let's make the single-column width the default layout and *enhance* to the two-column view and the background image.
* *But*, let's make the tabbed navigation default (not the vertical).
* Let's also fine-tune the _breakpoints_.
    * Let's make the vertical navigation appear for windows <= 550px.
    * Let's make the double column view kick in and the moon background appear for windows >= 750px.

## Speaker Notes

* TODO: Ask Jason about image download (moon)
* Talk about media query support and how it's a bit easier to handle on the desktop

# CSS Restructuring

~~~ {.css}
// Baseline CSS
// Single column layout for #main and #sidebar
// No background moon image
// Tabbed nav (horizontal)

@media screen and (min-width: 750px) {
  // Two-column view
  // Moon background image
  // Proportion adjustments for padding and fonts
}
@media screen and (max-width: 550px) {
  // Vertical navigation
  // Proportion adjustments for padding and fonts
}
~~~

# We're now mobile-first

Look at that, soldier! We're thinking mobile- and content-first. We're adapting our requirements and our layout based on the yins and yangs of project and customer requirements. Balance is key.

Now we're trained, we've got a bit of flight time under our belt. It's time to specialize, to [shape ourselves into ultimate fighting machines](04-honed-killing-machine.html)!