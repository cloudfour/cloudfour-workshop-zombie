% A Band of Brothers
% Frameworks (jQuery Mobile) and the localStorage API


# I got one!

Sigma Stronghold leaders want a way for agents in the field to be able to record their zombie kills.

## Illustration: WHERE WHEN HOW

![](images/06-3ws.png)

## Speaker Notes

Each time a soldier nabs a zombie out there, he or she should be able to record when, where and how that zombie met its fate. Kind of like a zombie kill board.

# We're going to build this!

## Figure: The end result

![](images/06-screen.png)

# Frameworks

## So, *how* do we build something like this?

Frameworks, libraries, tools, templates...all of these can give you a leg up.

## Speaker Notes

Sometimes you don't want to keep re-inventing the same zombie-blasting cannon over and over again. We zombie fighters might be a ragtag bunch, but we stick together.


# jQuery Mobile

## Figure: JQM

![](images/06-jquerymobile-com.png)

## Speaker Notes

* jQuery Mobile is a mobile web framework built atop the popular jQuery library.
* jQuery Mobile works hand-in-hand with semantic HTML5 markup.

# To Build our app

1. Build a basic jQuery Mobile page.
2. Add the special sauce to create our "I got one!" app
3. Use a JavaScript library to make our zombie-kill data persistent.

# Building with jQuery Mobile

Content and applications with jQuery Mobile are constructed from:

1. HTML5 markup.
2. JavaScript: jQuery core and jQuery Mobile
3. CSS: jQuery Mobile's CSS
4. Your own custom stuff


# jQuery Mobile Page Structure

![](images/06-jqm.png)

* Delineated by HTML5 `data-` attributes.
* Enables content loading via AJAX.

~~~ {.html}
<div data-role="page">
  <div data-role="header"></div>
  <div data-role="content"></div>
  <div data-role="footer"></div>
</div>
~~~

# Starting *super* Basic


##### index.html


~~~{.html}
<!DOCTYPE html> 
<html> 
<head> 
	<title>I Got One!</title> 
</head> 
<body> 

<div data-role="page" id="nab-zombie">

</div>

</body>
</html>
~~~

## Speaker Notes

* We'll start with this crazy-basic page in Step 1 and make it a jQuery Mobile-ized page very quickly.
* Open the file in my editor (`missions/08-got-one/index.html`)

# Relying on our bros

Adding in the CSS and JavaScript to make our jQM page go.

~~~ {.html}
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
<script src="date.format.js"></script>
<script src="geo.js"></script>
~~~

## Speaker Notes

* `date.format.js` (Date.format) lets us do much easier date formatting with JavaScript.
* The `geo-location-js` library makes cross-platform geolocation a snap.
* Note the maximum scale on the `meta-viewport`
* TODO TODO: DESCRIBE VIEWPORT

~~~ {.html}
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
<script src="date.format.js"></script>
<script src="geo.js"></script>
~~~

# Add a header

At the outset, our jQM page is empty. Let's put some stuff in it.

~~~ {.html}
<div data-role="page" id="nab-zombie">
  <div data-role="header">
    <h1>I got one!</h1>
  </div>
</div>
~~~

## Speaker Notes

* Let's add a header.
* jQuery Mobile's CSS and JS will stye this into a (rather iOS-esque) header element.

~~~ {.html}
  <div data-role="header">
    <h1>I got one!</h1>
  </div>
~~~


# And now, a content area...

~~~ {.html}
<div data-role="page" id="nab-zombie">
  <div data-role="header">
    <h1>I got one!</h1>
  </div>
  <div data-role="content">
    <!-- Our content will go here! -->
  </div>
</div>
~~~

## Speaker Notes

~~~ {.html}
  <div data-role="content">
    <!-- Our content will go here! -->
  </div>
~~~

### Try it out!

# Et Voila!

## Figure: A header in jQM

![](images/06-header.png)

#### ...OK, so there's no content yet

# Step 2: Dropping in our controls

![](images/06-starting-point.png)

Easy, but not too exciting. Let's put in some UI elements that will let Sigma Stronghold fighters record a nabbed zombie.

## Speaker Notes

* Moving into step 2 in the field notes.

# How do we do that? Adding a select input

~~~ {.html}
<div data-role="content">
  <div data-role="fieldcontain">
    <label for="how-zombie">How'd you nab it?</label>
    <select name="how-zombie" id="how-zombie">
      <option value="tank">Tank</option>
      <option value="conflagration">Conflagration</option>
      <option value="poison">Poison</option>
      <option value="nukes">Micro-nukes</option>
      <option value="trickery">Trickery</option>
      <option value="corrosive">Corrosive</option>
      <option value="dismemberment">Dismemberment</option>
    </select>
  </div> 

</div>
~~~

## Speaker Notes

* First, let's add a `<select>` element, just like you would do for any HTML form (except in our case, we don't have a containing form). Add this to the `<div data-role="content">` area.
* Don't worry about typing this code into the file...or on the following slides.

~~~ {.html}
<div data-role="content">
  <div data-role="fieldcontain">
    <label for="how-zombie">How'd you nab it?</label>
    <select name="how-zombie" id="how-zombie">
      <option value="tank">Tank</option>
      <option value="conflagration">Conflagration</option>
      <option value="poison">Poison</option>
      <option value="nukes">Micro-nukes</option>
      <option value="trickery">Trickery</option>
      <option value="corrosive">Corrosive</option>
      <option value="dismemberment">Dismemberment</option>
    </select>
  </div> 

</div>
~~~

# Now, we'll add a button

~~~ {.html}
      <option value="dismemberment">Dismemberment</option>
    </select>
  </div> 
  <input type="button" value="I got one!" id="got-one" data-theme="b" />
</div>
~~~

## Speaker Notes

* Again, jQuery Mobile will create a styled, mobile-ish button from this `<input>` field.

~~~ {.html}
      <option value="dismemberment">Dismemberment</option>
    </select>
  </div> 
  <input type="button" value="I got one!" id="got-one" data-theme="b" />
</div>
~~~

# Dead Zombie Storage

When a soldier nabs a zombie by tapping the "I Got One!" button, we'll need a place to display the info about that poor zombie.

~~~ {.html}
</div> 
<input type="button" value="I got one!" id="got-one" data-theme="b" />
<ul data-role="listview" data-inset="true" id="zombielist">
</ul>
</div> <!-- /End <div data-role="content"> -->
~~~

`data-role="listview"` indicates to jQuery Mobile that this list should be styled as a list widget.

## Speaker Notes

~~~ {.html}
</div> 
<input type="button" value="I got one!" id="got-one" data-theme="b" />
<ul data-role="listview" data-inset="true" id="zombielist">
</ul>
</div> <!-- /End <div data-role="content"> -->
~~~

# A list widget what now?

### jQuery Mobile Turns This

#### Code

~~~ {.html}
<ul data-role="listview" data-inset="true" id="zombielist">
  <li><img src="icons/z2.png" alt="Killed by micro-nukes" /><h3>Zombie Nabbed!</h3>
  <p><strong>01/18/12 13:44</strong></p>
  <p>Coordinates: 40.7678494, -73.9853328</p></li>
</ul>
~~~

### Reverse: Example of Listview

![](images/06-li-example.png)

### Into this

So...each added zombie, ultimately, will get added as a `<li>` element in that empty `<ul>` we just added.

## Speaker Notes

* Do copy-and-paste work.
* This HTML is in the Snippet section of step 2 in the field notes.
* Stop now, and load updated file in browser.

# And now we have a starting point

## Figure: Screen shot of our current page

![](images/06-starting-point.png)


# Warning: JavaScript ahead

## Figure: ALERT!

![](images/06-alert.png)

# Adding the JavaScript

Now we can drop in some custom JavaScript that makes this go:

~~~ {.html}
<script src="zombie.js"></script>
~~~

The curious can open up `zombie.js` and follow along as I confuse you through the next several slides!

## Speaker Notes

* Dropping in this `<script>` tag is the only piece of work for step 3 in field notes.
* Go drop it in.

# Our JavaScript

Our JavaScript is in *two* main parts:

* A `window.zombieManager` object that defines the behavior of our zombie-nabbing app and updates the displayed list and whatnot.
* Some initialization hoo-hah that happens on jQuery Mobile's `pageinit` event.

# Working with jQuery Mobile events

* When the page is done loading and the widgets have been marked up...

~~~ {.javascript}
$("#nab-zombie").live('pageinit', function() {
  // Initialize our web app and do some cool things
  zombieManager.init();
});
~~~

## Speaker Notes

* ...And what is this `zombiemanager` of which you speak?

# The meat of zombie.js


~~~{.javascript}
window.zombieManager = function() {
  var zombies       = new Array(),        // An array to hold dead zombies
  zombie_icons      = { },                // Different icons for different modes of death
  init              = function() { },     // One of the returned functions
  addZombie         = function(...) { },  // Add new nabbed zombie (2nd returned function)
  showZombies       = function() { },     // Show/refresh list of dead zombies
  displayZombie     = function(...) { },  // Build a display for single dead zombie
  addResetButton    = function() { },     // Add a...yeah...reset button
  resetZombies      = function() { };     // Reset the dead zombies
  
  return {
    init:         init,
    addZombie:    addZombie
  };
  
};
~~~

## Speaker Notes

* This is the skeleton structure of `zombieManager`.
* Returns an object literal with two available function references.
* `init` and `addZombie`. The rest happens inside of the `zombieManager.`

# Settin' things up

## Leaning on our bros

~~~{.javascript}
init = function() {
  // Is Geolocation supported?
  var geoHappy = geo_position_js.init();
}
~~~

## Speaker Notes

* As you know, the title of this section is "A Band of Brothers".
* Geo-location-javascript library is a third-party open-source abstraction of the W3C Geolocation API.
* We've included it in the `<head>` already.
* And here is a test for geolocation support. The `init` method returns true if the browser supports Geolocation.


# Settin' things up

~~~{.javascript}
init = function() {
    // Is Geolocation supported?
    var geoHappy = geo_position_js.init();
    $("#got-one").click(function() {
      var now = new Date(),
          how = $("#how-zombie").val();
      if (geoHappy) {
        geo_position_js.getCurrentPosition(function(position) {
          zombieManager.addZombie(now, position, how);
        }, function(error) {
          console.log("Geolocation error: " + error.message)
          zombieManager.addZombie(now, null, how);
        });
      } else { // It's also OK to add a zombie w/o location data
        zombieManager.addZombie(now, null, how);
      }
    });
    showZombies();
  } // ...
~~~

## Speaker Notes

* Now that we have that geolocation check out of the way, our main job is to handle the clicks and taps to the "I got one!" button. That's the main point of interaction for folks using the I Got one! app.
* Tap, then we generate a current datetime object and obtain the current value from the "How'd you kill it?" drop-down. All important data for our info.
* If geo supported and successful, pass datetime, location and method info. If not supported or is error, pass datetime and method info.
* ...and add a zombie using the addZombie method.

# Managing our Zombies

We need a way to:

1. Add a new dead zombie
2. Store our dead zombies
3. Show dead zombie details (in a `<li>` added to the `<ul#zombielist>`)
4. Reset zombies

## Speaker Notes

* Now that we've got ourselves initialized...

# Adding a Dead Zombie

~~~ {.javascript}
addZombie = function(zombieWhen, zombieWhere, zombieHow) {
    zombies[zombies.length] = {
      when      : zombieWhen.valueOf(),
      where     : zombieWhere,
      how       : zombieHow
    };
    showZombies();  
},
~~~

Let's go look at `showZombies`...

# Showing the dead Zombies


~~~ {.javascript}
showZombies = function() {
  var $zombielist = $('#zombielist'), $zombieRow;
  for(var i = 0; i < zombies.length; i++) {
    var zombieWhen = new Date(zombies[i].when),
        zombieID   = 'zombie-' + zombieWhen.format('mdyhis'); // Using date.format.js
    if (!$("#" + zombieID).length) {
      $zombieRow = displayZombie(zombies[i], zombieID); // Need to build an <li> element
      $zombielist.prepend($zombieRow);
    }
  }
  if (zombies.length && !$('#zombie-reset').length) {
    addResetButton();
  }
  $('#zombielist').listview('refresh');
},
~~~

## Speaker Notes

* ...For each of the zombies in the array...
* Generate a DOM ID for its row in the listview
* If that DOM ID doesn't exist yet...build an <li> element; that's done in `displayZombie()`. Add it to the beginning of the list.
* Have to refresh the listview (for the `<ul#zombielist>`) after altering elements in the list.

# Building a row for the dead zombie

We're trying to emulate this markup:

~~~ {.html}
<ul data-role="listview" data-inset="true" id="zombielist">
  <li><img src="icons/z2.png" alt="Killed by micro-nukes" /><h3>Zombie Nabbed!</h3>
  <p><strong>01/18/12 13:44</strong></p>
  <p>Coordinates: 40.7678494, -73.9853328</p></li>
</ul>
~~~

# displayZombie

~~~{.javascript}
displayZombie = function(zombie, zombieID) { 
  var $zombieImg, coords,
    $zombieRow = $('<li></li>').addClass('zombie').attr('id', zombieID),
    zombieWhen   = new Date(zombie.when);
  if (zombie.how && zombie_icons[zombie.how]) {
    $zombieImg = $("<img>").attr(
      { src :  'icons/' + zombie_icons[zombie.how], alt :  'How it died: ' + zombie.how });
    $zombieRow.append($zombieImg);
  }
  $zombieRow.append( 
    '<h3>Zombie Nabbed!</h3><p><strong>'  + zombieWhen.format('m/d/y H:i') + '</strong></p>'
  );    
  if (zombie.where && zombie.where.coords) {
    coords = zombie.where.coords;
    $zombieRow.append('<p>Coordinates: '  + coords.latitude + ', ' + coords.longitude + '</p>');
  }
  return $zombieRow;
},
~~~

## Speaker Notes

Don't dwell too much on this. Let folks ask questions if they want.

# Resetting Zombies

Now we can add zombies and show zombies. What if someone wants to start over and reset their zombies?

~~~ {.javascript}
resetZombies = function() {
  zombies = [];
  $('li.zombie').remove();
  $('#zombielist').listview('refresh');
};
~~~

# Try it out!

## Figure: "I got one!" on an Android

![](images/i-got-one-screenshots/android-list.png)

# Cool, yeah, maybe, OK, but kind of useless


* As soon as the page is reloaded, all of the zombies go away.
* We need a way to store found zombies on the client.

### How about a device API?

# localStorage

![](images/06-storage.png)

There is another standard device API for storing simple string key-value pairs on the client: *localStorage*.

### However, we need to store more than strings...

# Leaning on our brothers again

## Lawnchair

![](images/06-lawnchair.png)

* Lawnchair is an open source, simple JSON storage utility that can store data on the client.
* Several adapters are available for Lawnchair, including one that uses localStorage underneath (DOM adapter).

## Speaker Notes

* Now we're moving into step 4 of the field notes. This is a slightly more advanced section, though it is still a copy and paste game.

# Let's kick up a Lawnchair, yeah?

##### index.html

~~~{.html}
<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
<script src="Lawnchair.js"></script>
<script src="dom.js"></script>
<script src="date.format.js"></script>
~~~

##### zombies.js

~~~ {.javascript}
window.zombieManager = (function() {
  var zombies       = new Array(),
  zombieChair       = Lawnchair({name: 'zombies'}, function() {}),
  zombie_icons      = { ... }
  // ...
~~~~

## Speaker Notes

* Include the scripts `Lawnchair.js` and `dom.js` in our document's `<head>`.
* Then: Instantiate the Lawnchair. Do this right after initializing the `zombies` array in our `zombieManager`.

# Update the addZombie method

Save the updated zombies array...

~~~ {.javascript}
addZombie = function(zombieWhen, zombieWhere, zombieHow) {
    zombies[zombies.length] = {
      when      : zombieWhen.valueOf(),
      where     : zombieWhere,
      how       : zombieHow
    };
    zombieChair.save({key: 'zombies', value : zombies });
    showZombies();  
},
~~~

## Speaker Notes

This is the end of the first part of the Lawnchair section.

# Update the init method

We want to check the zombieChair for stored dead zombies when we initialize...

~~~{.javascript}
init = function() {
  // Is Geolocation supported?
  var geoHappy = geo_position_js.init();
  $("#got-one").click(function() {
    // ...    
  });
  zombieChair.get('zombies', function(zombiesOnIce) {
    if (zombiesOnIce) {
      zombies = zombiesOnIce.value;
    }
  });
  showZombies(); 
},
~~~

# And finally...update the resetZombies method

Nuke the zombieChair to remove all of the stored zombies...

~~~{.javascript}
resetZombies = function() {
  zombies = [];
  zombieChair.nuke();
  $('li.zombie').remove();
  $('#zombielist').listview('refresh');
};
~~~

# Take it for a spin

## Figure: Screen shot of I Got One!

![](images/06-screen.png)

# As always, there are gotchas

* Date objects don't unserialize correctly from Lawnchair (so we are storing a string representation of a Date object).
* jQM `pagecreate` and `pageinit` events can be a bit tricky.

# Getting the final mile

Sometimes the zombies you face are not vulnerable to the mad skills you possess. Some things just aren't yet attainable on the mobile web, which is why [desperate times call for desperate measures](07-desperate-times.html).