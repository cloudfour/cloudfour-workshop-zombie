% A Band of Brothers
% Frameworks (jQuery Mobile) and localStorage


# I got one!

![](images/06-3ws.png)

Sigma Stronghold leaders want a way for agents in the field to be able to record their zombie kills.

Each time a soldier nabs a zombie out there, he or she should be able to record when, where and how that zombie met its fate. Kind of like a zombie kill board.

# Frameworks

## So, how do we build something like this?

Sometimes you don't want to keep re-inventing the same zombie-blasting cannon over and over again. We zombie fighters might be a ragtag bunch, but we stick together.

Frameworks, libraries, tools, templates...all of these can give you a leg up.

# jQuery Mobile

![](images/06-jquerymobile-com.png)

jQuery Mobile is a mobile web framework built atop the popular jQuery library.

jQuery Mobile works hand-in-hand with semantic HTML5 markup.

# Building with jQuery Mobile

Content and applications with jQuery Mobile are constructed from:

* Rather basic HTML5 markup.
* The inclusion of the jQuery core JavaScript library, the jQuery Mobile JS and the jQuery Mobile CSS.
* You can build on this with your own JavaScript, as you please.


# Structure of jQuery Mobile Page

## Code

~~~ {.html}
<!DOCTYPE html> 
<html> 
	<head> 
	<title>I Got One!</title> 
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
	<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
	<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
</head>
<body> 

<div data-role="page">
  <div data-role="header">
  </div>
  
  <div data-role="content">
  </div>
</div>

</body>
</html>
~~~

## Speaker Notes

* Note the maximum-scale zoom thing here

# jQuery Mobile Page Structure

![](images/06-jqm.png)

* Delineated by HTML5 `data-` attributes.
* Enables content loading via AJAX.

~~~ {.html}
<div data-role="page">
  <div data-role="header"></div>
  <div data-role="content"></div>
  <div data-role="footer"></div>
</div>
~~~

# Relying on our bros

## Code

~~~ {.html}
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
<script src="date.format.js"></script>
<script src="http://code.google.com/apis/gears/gears_init.js" type="text/javascript"></script>
<script src="geo.js"></script>
<script src="zombie.js"></script>
~~~

* `date.format.js` (Date.format) lets us do much easier date formatting with JavaScript.
* Using Google Gears and the `geo-location-js` library makes cross-platform geolocation a snap.

# OK, let's go!

Find the starting point for the "I got one!" web app in your rucksack, in the `i-got-one` folder. Go ahead and open `index.html` in your text editor.

### Our mission

The starting point is an empty jQuery Mobile page. We'll need to:

1. Add a header to see how jQM automatically styles stuff for us.
2. Drop in some user interface elements so soldiers can enter their nabbed zombies.
3. Add some custom JavaScript

# Add a header

At the outset, our jQM page is empty. Let's put some stuff in it.

* This is in the `<div data-role="header">`.
* jQuery Mobile's CSS and JS will stye this into a (rather iOS-esque) header element.

~~~ {.html}
<div data-role="header">
  <h1>I got one!</h1>
</div>
~~~

##### index.html

### Try it out!

# Et Voila!

TODO: Screenshot of header

# Putting the "Form" In

Easy, but not too exciting. Let's put in some UI elements that will let Sigma Stronghold fighters record a nabbed zombie.

TODO: Screen shot of just UI elements

# How do we do that?

First, let's add a `<select>` element, just like you would do for any HTML form (except in our case, we don't have a containing form). Add this to the `<div data-role="content">` area.

## Code

~~~ {.html}
<div data-role="content">
  <div data-role="fieldcontain">
    <label for="how-zombie">How'd you nab it?</label>
    <select name="how-zombie" id="how-zombie">
      <option value="tank">Tank</option>
      <option value="conflagration">Conflagration</option>
      <option value="poison">Poison</option>
      <option value="nukes">Micro-nukes</option>
      <option value="trickery">Trickery</option>
      <option value="corrosive">Corrosive</option>
      <option value="dismemberment">Dismemberment</option>
    </select>
  </div> 

</div>
~~~

# Now, we'll add a button

* Again, jQuery Mobile will create a styled, mobile-ish button from this `<input>` field.

## Code 

~~~ {.html}
  <input type="button" value="I got one!" id="got-one" data-theme="b" />
~~~

# Dead Zombie Storage

When a soldier nabs a zombie by tapping the "I Got One!" button, we'll need a place to display the info about that poor zombie. For each zombie nabbed, we'll add a row to a `<ul>`. Let's create an empty `<ul>` to hold those incoming zombies. Put this at the very bottom of the `<div data-role="content">`

~~~ {.html}
<ul data-role="listview" data-inset="true" id="zombielist">
</ul>
</div> <!-- /End <div data-role="content"> -->
~~~

`data-role="listview"` indicates to jQuery Mobile that this list should be styled as a list widget.

# A list widget what now?

### jQuery Turns This

~~~ {.html}
<ul data-role="listview" data-inset="true" id="zombielist">
  <li><img src="icons/z2.png" alt="Killed by micro-nukes" /><h3>Zombie Nabbed!</h3>
  <p><strong>01/18/12 13:44</strong></p>
  <p>Coordinates: 40.7678494, -73.9853328</p></li>
</ul>
~~~

### Into this

![](images/06-li-example.png)

# And now we have a starting point

## Figure: Screen shot of our current page

![](images/06-starting-point.png)

# A quick aside about browser support

* By its nature, jQuery Mobile practices enthusiastic progressive enhancement
* jQuery Mobile works in browsers that do not support JavaScript
* However, our functionality requirements for the "I got one!" app effectively require JavaScript

TODO: Screenshot of JS-off

# Warning: JavaScript ahead

TODO: Drawing of warning light

# Adding the JavaScript

Now we can drop in some custom JavaScript that makes this go:

~~~ {.html}
<script src="zombie.js"></script>
~~~

# Basic structure of a little zombie manager

## Code

~~~ {.javascript}
window.zombieManager = (function() {
  var zombies       = new Array();
  var zombie_icons  = { };
  
  var resetZombies = function() {};
  var showZombies = function() {};

  return {
    addZombie     : function(zombieWhen, zombieWhere, zombieHow) { }
  }
}());
~~~

# Setting things up when the JQM page inits

## Code

~~~ {.javascript}
$("#nab-zombie").live('pageinit', function() {
  var geoHappy = geo_position_js.init();
  $("#got-one").click(function() {
    var now = new Date();
    var how = $("#how-zombie").val();
    if (geoHappy) {
      geo_position_js.getCurrentPosition(function(position) {
        zombieManager.addZombie(now, position, how);
      }, function(error) {
        console.log("Geolocation error: " + error.message);
        zombieManager.addZombie(now, null, how);
      });
    } else { // It's also OK to add a zombie w/o location data
      zombieManager.addZombie(now, null, how);
    }
  });
});
~~~

# Try it out!

## Figure: "I got one!" on an Android

![](images/i-got-one-screenshots/android-list.png)

# Cool, yeah, maybe, OK, but kind of useless


* As soon as the page is reloaded, all of the zombies go away.
* We need a way to store found zombies on the client.

### How about a device API?

# localStorage

![](images/06-storage.png)

There is another standard device API for storing simple string key-value pairs on the client: *localStorage*.

### However, we need to store more than strings...

# Leaning on our brothers again

## Lawnchair

![](images/06-lawnchair.png)

* Lawnchair is an open source, simple JSON storage utility that can store data on the client.
* Several adapters are available for Lawnchair, including one that uses localStorage underneath (DOM adapter).

# Let's kick up a Lawnchair, yeah?

Instantiate the Lawnchair.

~~~ {.javascript}
window.zombieManager = (function() {
  var zombies       = new Array();
  var zombieChair   = Lawnchair({name: 'zombies'}, function() {});
~~~~

# Add an init function

## Code

~~~ {.javascript}
return {
  // Init; build initial #zombielist
  init          : function() {
    zombieChair.get('zombies', function(zombiesOnIce) {
      if (zombiesOnIce) {
        zombies = zombiesOnIce.value;
      }
    });
    showZombies();
  },
  // Add a new zombie to the list of zombies
  addZombie     : function(zombieWhen, zombieWhere, zombieHow) {
  // ...
~~~

# ...update the addZombie function...

~~~ {.javascript}
  },
  // Add a new zombie to the list of zombies
  addZombie     : function(zombieWhen, zombieWhere, zombieHow) {
    zombies[zombies.length] = {
      when      : zombieWhen.valueOf(),
      where     : zombieWhere,
      how       : zombieHow
    };
    zombieChair.save({key: 'zombies', value : zombies });
    showZombies();
  }
~~~

# ...update the resetZombies function...

~~~ {.javascript}
var resetZombies = function() {
    zombies = new Array();
    zombieChair.nuke();
    $('li.zombie').remove();
    $('#zombielist').listview('refresh');
  };
~~~

# And add a call to the init function...

~~~ {.javascript}
$("#nab-zombie").live('pageinit', function() {

  // Initialize our list of zombies
  zombieManager.init();
  // Is Geolocation supported?
  // ...
~~~

# Take it for a spin

TODO: Screen shot

# As always, there are gotchas

* Date objects don't unserialize correctly from Lawnchair (so we are storing a string representation of a Date object).
* jQM `pagecreate` and `pageinit` events can be a bit tricky.

# Getting the final mile

Sometimes the zombies you face are not vulnerable to the mad skills you possess. Some things just aren't yet attainable on the mobile web, which is why [desperate times call for desperate measures](07-desperate-times.html).