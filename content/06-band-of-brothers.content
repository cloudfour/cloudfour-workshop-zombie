% Zombie 101: A Band of Brothers
% Jason Grigsby and Lyza Danger Gardner

# Frameworks

Sometimes you don't want to keep re-inventing the same zombie-blasting cannon over and over again. We zombie fighters might be a ragtag bunch, but we stick together.

Frameworks, libraries, tools, templates...all of these can give you a leg up.

# jQuery Mobile

![](images/06-jquerymobile-com.png)

jQuery Mobile is a mobile web framework built atop the popular jQuery library.

# I got one!

Sigma Stronghold leaders want a way for agents in the field to be able to record their zombie kills. Let's whip 'em up a quick mobile web app using the jQuery Mobile framework.

TODO: When/where/how graphic

Find the starting point for the little web app in your rucksack (see your field notes).

# Basic jQuery Mobile Page

TODO: Drawing of jQM structure

# Structure of jQuery Mobile Page

## Code

~~~ {.html}
<!DOCTYPE html> 
<html> 
	<head> 
	<title>I Got One!</title> 
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
	<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
	<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
</head>
<body> 

<div data-role="page">
  <div data-role="header">
  </div>
  
  <div data-role="content">
  </div>
</div>

</body>
</html>
~~~

## Speaker Notes

* Note the maximum-scale zoom thing here

# Relying on our bros

## Code

~~~ {.html}
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
	<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
	<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
	<script src="date.format.js"></script>
	<script src="http://code.google.com/apis/gears/gears_init.js" type="text/javascript"></script>
	<script src="geo.js"></script>
	<script src="zombie.js"></script>
~~~

## Speaker Notes

* `date.format.js` is a little library that emulates PHP syntax for date formatting.
* We're using the geolocation-js-library.

# Add a header

At the outset, our jQM page is empty. Let's put some stuff in it.

~~~ {.html}
  <div data-role="header">
    <h1>I got one!</h1>
  </div>
~~~

# Putting the "Form" In

Easy, but not too exciting. Let's put in some UI elements that will let Sigma Stronghold fighters record a nabbed zombie.

## Code

~~~ {.html}
<div data-role="content">
  <div data-role="fieldcontain">
    <label for="how-zombie">How'd you nab it?</label>
    <select name="how-zombie" id="how-zombie">
      <option value="tank">Tank</option>
      <option value="conflagration">Conflagration</option>
      <option value="poison">Poison</option>
      <option value="nukes">Micro-nukes</option>
      <option value="trickery">Trickery</option>
      <option value="corrosive">Corrosive</option>
      <option value="dismemberment">Dismemberment</option>
    </select>
  </div>
  <input type="button" value="I got one!" id="got-one" data-theme="b" />
  
  <ul data-role="listview" data-inset="true" id="zombielist">
  </ul>
</div>
~~~

## Speaker Notes

* A select list for how the zombie was nabbed
* A button to click
* An empty list to hold incoming zombies

# Adding the JavaScript

Now we can drop in some custom JavaScript that makes this go:

~~~ {.html}
<script src="zombie.js"></script>
~~~

# Basic structure of a little zombie manager

## Code

~~~ {.javascript}
window.zombieManager = (function() {
  var zombies       = new Array();
  var zombie_icons  = { };
  
  var resetZombies = function() {};
  var showZombies = function() {};

  return {
    addZombie     : function(zombieWhen, zombieWhere, zombieHow) { }
  }
}());
~~~

# Setting things up when the JQM page inits

## Code

~~~ {.javascript}
$("#nab-zombie").live('pageinit', function() {
  var geoHappy = geo_position_js.init();
  $("#got-one").click(function() {
    var now = new Date();
    var how = $("#how-zombie").val();
    if (geoHappy) {
      geo_position_js.getCurrentPosition(function(position) {
        zombieManager.addZombie(now, position, how);
      }, function(error) {
        console.log("Geolocation error: " + error.message);
        zombieManager.addZombie(now, null, how);
      });
    } else { // It's also OK to add a zombie w/o location data
      zombieManager.addZombie(now, null, how);
    }
  });
});
~~~

# Try it out!

TODO: Screen shot

# Cool, yeah, maybe, OK, but kind of useless

* As soon as the page is reloaded, all of the zombies go away.
* We need a way to store found zombies on the client.

### How about a device API?

TODO: Storage drawing

# localStorage

There is another standard device API for storing simple string key-value pairs on the client: *localStorage*.

### However, we need to store more than strings...

# Leaning on our brothers again

## Lawnchair

* Lawnchair is an open source, simple JSON storage utility that can store data on the client.
* Several adapters are available for Lawnchair, including one that uses localStorage underneath (DOM adapter).

# Let's kick up a Lawnchair, yeah?

Instantiate the Lawnchair.

~~~ {.javascript}
window.zombieManager = (function() {
  var zombies       = new Array();
  var zombieChair   = Lawnchair({name: 'zombies'}, function() {});
~~~~

# Add an init function

## Code

~~~ {.javascript}
return {
  // Init; build initial #zombielist
  init          : function() {
    zombieChair.get('zombies', function(zombiesOnIce) {
      if (zombiesOnIce) {
        zombies = zombiesOnIce.value;
      }
    });
    showZombies();
  },
  // Add a new zombie to the list of zombies
  addZombie     : function(zombieWhen, zombieWhere, zombieHow) {
  // ...
~~~

# ...update the addZombie function...

~~~ {.javascript}
  },
  // Add a new zombie to the list of zombies
  addZombie     : function(zombieWhen, zombieWhere, zombieHow) {
    zombies[zombies.length] = {
      when      : zombieWhen.valueOf(),
      where     : zombieWhere,
      how       : zombieHow
    };
    zombieChair.save({key: 'zombies', value : zombies });
    showZombies();
  }
~~~

# ...update the resetZombies function...

~~~ {.javascript}
var resetZombies = function() {
    zombies = new Array();
    zombieChair.nuke();
    $('li.zombie').remove();
    $('#zombielist').listview('refresh');
  };
~~~

# And add a call to the init function...

~~~ {.javascript}
$("#nab-zombie").live('pageinit', function() {

  // Initialize our list of zombies
  zombieManager.init();
  // Is Geolocation supported?
  // ...
~~~

# Take it for a spin

TODO: Screen shot

# As always, there are gotchas

* Date objects don't unserialize correctly from Lawnchair (so we are storing a string representation of a Date object).
* jQM `pagecreate` and `pageinit` events can be a bit tricky.