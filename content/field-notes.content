% Field Notes | Zombie 101, Webvisions NYC
% Jason Grigsby and Lyza Danger Gardner

----------------

# 2. Boot Camp: Performance and Semantic Clarity

## Sigma Stronghold Web Site

You'll find the Sigma Stronghold web site landing page in `zombie-rucksack/sigma-stronghold-website/index.html`. [Here's what it looks like right now](../sigma-stronghold-website/).

## Weapons for Performance

* [ySlow](http://developer.yahoo.com/yslow/)
* [W3C validator](http://validator.w3.org/)
* [Smush.it](http://smush.it)
* [SpriteMe](http://spriteme.org/)

### Sing Along if you Like!

You can optionally follow along in your own text editor as we clean up Sigma Stronghold's (markup) act.

### Fixing what's broken and getting rid of the weather

1. Find and fix the broken nested `<span>` elements in index.html. Use the [W3C validator][w3cv] as your guide.
2. Remove the entire weather widget (`div#weather`).
3. Revalidate/repeat until you see the green happy color.

### The missing bits

1. Reduce the Google fonts stylesheets to a single `<link>` tag.
    a. The two fonts actually being used on the page are *Nosifer* (drippy headlines) and *Special Elite* (body).
    b. Remove the `<link>` tags for fonts that aren't being used at all.
    c. Concatenate the remaining two fonts into a single `<link>` tag using this format:
    `<link href="http://fonts.googleapis.com/css?family=Cool+Font|Squiggly" rel="stylesheet">`
2. Remove the `<link>` tag that points to `home.css`.
3. Update the CSS rule for `h2`. Update the filename from `blip.jpg` to `blip.png`.
4. Add a favicon.
    a. Find `favicon.ico` in the `supplemental/boot-camp` folder inside of your rucksack.
    b. Copy that into the `sigma-stronghold-website` directory (at the top level of your rucksack).
    c. Add this code just after the Google fonts stylesheet `<link>`s: `<link rel="shortcut icon" href="favicon.ico" />`

[w3cv]: http://validator.w3.org/ "W3C Validator"

### Deflabbing some images

1. Remove the `zombie-girl` image and its containing `<div>` entirely (`div#nozombies`).
2. Replace the image for contact-HQ with the following HTML chunk:

    ~~~ {.html}
        <h2>Contact HQ</h2>
        <p>Abandoned Post Office<br />
        23 Daryl Dixon Road<br />
        Manhattan Offset Zone<br />
        <a href="mailto:help@sigma-stronghold.com">help@sigma-stronghold.com</a><br />
        CB Channel 32.6</p>
    ~~~
        
3. Deflate the moon image using the smush.it tool.

    a. Go to [smush.it](http://smush.it)
    b. Use the *Uploader* tab.
    c. Upload the image `images/moon.jpg` (in your rucksack, in the `sigma-stronghold-website` directory).
    d. Replace `images/moon.jpg` with the smushed version.

### Server-side optimization in Apache 2.x 

A sample .htaccess file.

        # Turn on and configure GZIP compression
        <IfModule mod_deflate.c>
         SetOutputFilter DEFLATE
         # Donâ€™t compress
         SetEnvIfNoCase Request_URI \.(?:gif|jpe?g|png)$ no-gzip dont-vary
         SetEnvIfNoCase Request_URI \.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary
         #Dealing with proxy servers
         <IfModule mod_headers.c>
         Header append Vary User-Agent
         </IfModule>
        </IfModule>
        
        # Use mod_expires to set future expirations on resources
        <IfModule mod_expires.c>
        ExpiresActive On
        ExpiresByType text/html "access plus 1 seconds"
        ExpiresByType image/gif "access plus 2 years"
        ExpiresByType image/jpeg "access plus 2 years"
        ExpiresByType image/png "access plus 2 years"
        ExpiresByType text/css "access plus 2 years"
        ExpiresByType text/javascript "access plus 2 years"
        ExpiresByType application/x-javascript "access plus 2 years"
        ExpiresByType image/x-icon "access plus 2 years"
        </IfModule>

        # Turn off ETags
        FileETag none

[More information about enabling GZIP on apache](http://www.techiepark.com/tutorials/how-to-enable-gzip-compression-in-apache-server-to-speed-up-website/)

## Getting all semantic up in here

### Some of the things improved in the Sigma Stronghold markup:

* `div#navigation` changed to `<nav>` element.
* `#page` id removed from `<div>`; used parent-child selector instead.
* Convert `#footer` to `<footer>` element.
* Reduce structural complexity in news items: removed extra `<div>`s.
* Replaced `span.grey` with `<small>`
* `span.black` was pointless; no style for it. Also some other useless spans in the news divs.
* Instead of `.red`, used an `<em>` element, which carries semantic meaning.
* Removed extra internal `<div>`s from sidebar.
* `#left` and `#right` renamed to `#main` and `#sidebar`, respectively

### Taking it further...

We didn't do these things but they might be cool, too:

* Address could be hCard
* `<article>` element instead of `<div>` for news items.
* `<section>` element instead of other `<div>`s.

### Other Tools for Training

* [SpriteMe](http://spriteme.org/) for creating CSS sprites. By combining multiple CSS images into individual sprites, you both reduce overall image file size (usually) and reduce the number of HTTP requests (definitely).
* [Online YUI Compressor](http://www.refresh-sf.com/yui/) Handy tool to help compress and minify CSS and JavaScript.

### Survival Tools

* [Sample .htaccess file](../survival-tools/.htaccess.example).

## *Do this*: Dropping in optimized files!

### Get ready to go into battle!

* Replace the current versions of `index.html` and `styles.css` in your `sigma-stronghold-website` directory with the versions in [`supplemental/boot-camp`](../supplemental/boot-camp). 
* If you haven't already, copy the `favicon.ico` file from [`supplemental/boot-camp`](../supplemental/boot-camp) to your `sigma-stronghold-website` folder.

Now you have the semantically-improved, optimized version of Sigma Stronghold's web site. *Onward!*

-----------------------

# 3. Release the Hounds! Responsive Web Design

For more expounding on the topic of relinquishing control, see Lyza's presentation ["Crap, it doesn't look quite right: Or, How I learned to stop worrying and set my mobile web sites free"](http://www.slideshare.net/lyzadanger/crap-it-doesnt-look-quite-right-or-how-i-learned-to-stop-worrying-and-set-my-mobile-web-sites-free-9518337) on Slideshare.

* See Ethan's ([@beep](http://twitter.com/beep)) original article about RWD on [A List Apart](http://www.alistapart.com/articles/responsive-web-design/)
* Fluid formula: `result = target / context`
* Rough rule of thumb for font sizes: `1em = 100% ~= 16px ~= 12pt`. *Approximately*.
* Percentages (%) and `em`s are both fluid units, `pt`s, `px`, inches and pica are fixed. (Technically, `px` are not *absolute* absolute, as the size of a pixel varies with different devices and screens and are not *fixed*, per se. However, for our purposes, they are effectively absolute, as they do not scale).

## *Do This*: Converting the CSS to a fluid layout

1. Edit `styles.css` in the `sigma-stronghold-website` folder in your rucksack.
2. Set a `max-width` instead of a `width` on the two main containing elements, `body > div` and `#container`. Change the `padding` on `#container` to be in `em`s (relative) instead of `px` (absolute). You should end up with these two rules:

### Instead of

~~~ {.css}
body > div {
  width: 920px;
  margin: 0 auto;
  border-color: rgba(255, 255, 255, 0.2);
  border-width: 0px 7px; 
}
~~~

### Use

~~~ {.css}
body > div {
  max-width: 920px;
  margin: 0 auto;
  border-color: rgba(255, 255, 255, 0.2);
  border-width: 0px 7px;
}
~~~

### Instead of

~~~ {.css}
#container {
  zoom: 1;
  background: black;
  padding: 10px;
  width: 900px;
  clear: both; 
}
~~~

### Use

~~~ {.css}
#container {
  zoom: 1;
  background: black;
  padding: .625em;
  max-width: 900px;
  clear: both;
}
~~~

### Instead of

~~~ {.css}
#main {
  zoom: 1;
  margin-left: 10px;
  clear: left;
  float: left;
  width: 550px;
  ...           // And so on
}
~~~

### use

~~~ {.css}
#main {
  zoom: 1;
  margin-left: 1.5%;
  clear: left;
  float: left;
  width: 60%;
  ...
}
~~~

### Instead of

~~~ {.css}
#sidebar {
  margin-left: 570px; 
}
~~~

### Use

~~~ {.css}
#sidebar {
  margin-left: 63.5%;
}
~~~

TODO: Provide end result CSS here.

## Media Queries!

* You can always [read the spec](http://www.w3.org/TR/css3-mediaqueries/)

If you are curious, you can see the [first version of media query CSS here](sigma-media-query.html) (the desktop-first, single breakpoint version).

### Mobile- (or content-)first RWD

#### Baseline CSS

* Single-column view
* Tabbed navigation
* No body background image

#### 750px Breakpoint (and wider)

* Two-column layout
* Body background image
* Font and padding adjustments

#### 550px Breakpoint (and narrower)

* Vertical navigation
* Font and padding adjustments

## *Do This*: Create Mobile-first CSS

Edit the `styles.css` file in the `sigma-stronghold-website` directory.

### Baseline Changes

* No background image on the body
* Get rid of the wide, semi-transparent border on the body content area

#### Instead of

~~~ {.css}
body {
  background-color: black;
  color: white;
  font: 100% "Special Elite";
  background-image: url(images/moon.jpg);
  background-repeat: no-repeat;
}
~~~

#### Use

~~~ {.css}
body {
  background-color: black;
  color: white;
  font: 100% "Special Elite";
}
~~~

#### Instead Of

~~~ {.css}
body > div {
  max-width: 920px;
  margin: 0 auto;
  border-color: rgba(255, 255, 255, 0.2);
  border-width: 0px 7px;
  border-style: solid;
}
~~~

#### Use

~~~ {.css}
body > div {
  max-width: 920px;
  margin: 0 auto; 
}
~~~

#### Instead of

~~~ {.css}
#main {
  zoom: 1;
  margin-left: 1.5%;
  clear: left;
  float: left;
  width: 60%;
  /// ... And so on ...
}
~~~

#### Use

~~~ {.css}
#main {
  width: 100%;
  float: none;
  clear: both;
  margin: 0;
  zoom: 1;
  /// ... And so on ...
}
~~~

#### Instead of

~~~ {.css}
#sidebar {
  margin-left: 63.5%;
}
~~~

#### Use

~~~ {.css}
#sidebar {
  float: none;
  clear: both;
  margin: 0; 
}
~~~

### Adding a breakpoint for column reflow

Add the following CSS to the `styles.css` file.

~~~ {.css}
@media all and (min-width:750px) {
  /* Adding back in the background image */
  body {
    background-image: url(images/moon.jpg);
    background-repeat: no-repeat;
  }

  /* Here's a border */
  body > div {
    border-color: rgba(255, 255, 255, 0.2);
    border-width: 0px 7px;
    border-style: solid;
  }

  /* Float #main left; make it 60% width of its parent container */
  #main {
    margin-left: 1.5%;
    clear: left;
    float: left;
    width: 60%;
  }

  /* A fluid left margin for a right-aligned #sidebar */
  #sidebar {
    margin-left: 63.5%;
    clear: none;
  }
}
~~~

### Now add a breakpoint for narrow screens

This is where we'll go to vertical, stacked navigation. We are also adjusting some fonts and margins.

~~~ {.css}
@media all and (max-width:550px) {
  /* Here is the stacked navigation */
  #header nav ul li {
    float: none;
    clear: both;
    width: 100%;
    margin: .5em 0;
  }
  #header nav ul li a {
    margin: 0;
    padding: .75em;
  }
  /* Padding and font adjustments */
  h1 {
    font-size: 1.75em;
    line-height: 1.25em;
  }
  h3 {
    font-size: 1.1em;
    line-height: 1.2em;
  }
  p {
    font-size: .9em;
    line-height: 1.4em;
  }
  #header {
    padding: 1em 0;
  }
  #header h1, #header h3 {
    padding: 0 .375em;
  }
}
~~~

### If you have any woes...

1. You can find the updated, [mobile-first CSS file here](../supplemental/release-hounds/mobile-first.css).
2. Replace the `styles.css` in `sigma-stronghold-website` with this CSS.

-----------------------------

# 5. A Honed Killing Machine

## ApplicationCache!

### More Information about ApplicationCache

* There are enough little gotchas in appCache that it may behoove you to [read the spec](http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html).
* A handy site that lists a lot of the common gotchas can be found at <http://appcachefacts.info/>.
* We find that it is easiest to inspect and debug appCache using's Webkit's Web Inspector tool (available in Chrome, Safari).

### Cache Manifest Quickies

1. File must be served as `text/application-cache`. Often this can be effected by adding the following line to an apache config (`.htaccess` file or the like).

    ~~~
    AddType text/cache-manifest .appcache
    ~~~

2. Basic cache manifest syntax:

    ~~~
    CACHE MANIFEST

    CACHE:
    foo.jpg
    bar.png
    index.html
    ding/dong.html
    ~~~

3. Reference a cache manifest with the `manifest` attribute of the `<html>` tag. e.g. `<html manifest="manifest.appcache">`.

### Creating a Cache Manifest for the Sigma Stronghold Site

*Note*: If you are not running apache locally, you may not be able to get cache manifests working on your laptop. No worries!

1. Create a file called `manifest.appcache` in the `sigma-stronghold-website` folder in your rucksack.
2. Let's start by adding the landing page (really all we have of the site!) and its resources to the application cache: CSS, images...etc:

    ~~~
    CACHE MANIFEST

    CACHE:

    index.html
    favicon.ico
    images/blip.png
    images/bomb.png
    images/moon.jpg
    styles.css
    http://fonts.googleapis.com/css?family=Nosifer|Special+Elite
    ~~~

3. Edit the `.htaccess` file in the `sigma-stronghold-website` directory (create `.htaccess` if it doesn't exist yet).

4. Add the line:
    
    ~~~
    AddType text/cache-manifest .appcache
    ~~~
        
5. Edit `index.html`. Change the `<html>` tag to read:

    ~~~
    <html manifest="manifest.appcache">
    ~~~
        
6. Use the WebInspector to see if your appCache worked!

### Improving the Cache Manifest

We need to cache those Google fonts! Add this to the end of the `CACHE` section:

    http://themes.googleusercontent.com/static/fonts/nosifer/v2/7n0ZFTD4V11-kkhjuR2UIwLUuEpTyoUstqEm5AMlJo4.woff
    http://themes.googleusercontent.com/static/fonts/specialelite/v3/9-wW4zu3WNoD5Fjka35Jm4kaQb-UsZVONjobs91YQtw.woff

# Device APIs: Focus on Geolocation!

## W3C Geolocation API

* The spec for the [W3C Geolocation API spec](http://dev.w3.org/geo/api/spec-source.html) is relatively short and easy to understand (as specs go).

### Quick Details

Browsers that implement the W3C geolocation spec expose the `navigator.geolocation` object and its methods to the browser.

#### Code Snippets

~~~ {.javascript}
    navigator.geolocation.getCurrentPosition(successCallback, errorCallback)
    
    function successCallback(position) {
      // Latitude and Longitude are usually what you're after.
      // They're properties of the coords object on position.
      alert(position.coords.latitude + ', ' + position.coords.longitude);
    }
    function errorCallback(error) {
      // Do something or freak out.
    }
~~~

### Running a local web server

*Note*: If you view the geolocation test page (next section) as a `file://` in your web browser (that is, as a local file; not served by a web server), security settings will generally prevent you from geolocation information. Typically, an error will be generated akin to the user denying permission for geolocation.

Some possible ways to get things working:

1. If you run OS X's default apache web server, you can move the contents of the zombie rucksack somewhere within the area (document root) served as web resources. This is typically in the `Sites` folder in your user's home directory (note that Web Sharing will need to be enabled in your system settings to get this to work).
2. If you have a hosting provider, you could do your work there, if you choose.
3. Here is a ruby one-liner for serving the current directory (you'd access your stuff by going to `localhost:9090` in a browser):

    ~~~ {.ruby}
    ruby -r webrick -e "s = WEBrick::HTTPServer.new(:Port => 9090, :DocumentRoot => Dir.pwd); trap('INT') { s.shutdown }; s.start"
    ~~~
    
4. There is also a [one-line python script](http://www.garyrobinson.net/2004/03/one_line_python.html) for doing the same general thing.
5. I use [MAMP](http://www.mamp.info) on my Mac as a web server (comes with PHP and mysql). There's [XAMPP](www.apachefriends.org/en/xampp.html) for Windows and Linux. These are pretty easy installs but might be more than you want to deal with right at this second.

*If you don't have a web-served environment handy, no biggie. You can still follow along!*

### Building a Quickie Geolocation Test Page

1. Open the `index.html` file in the `where-am-i` folder in your rucksack.
2. Find the `<script>` tags. 

    ~~~ {.javascript}
    <script>
      if (navigator.geolocation) { // Test for W3C geolocation support
        
      }
    </script>
    ~~~
        
3. OK! Now expand upon that:

    ~~~ {.javascript}
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(onGeoSuccess, onGeoError);
    } else {
      onGeoError(new Error('Sorry, Geolocation not supported in this browser!'));
    }
    ~~~

4. *Note*: This won't work (well, there will be JS errors) until we define the `onGeoSuccess` and `onGeoError` callback functions. So let's do that now. Add this to the JavaScript (right after what's already there):

    ~~~~ {.javascript}
    function onGeoSuccess(position) {
      var coordinates = position.coords;
      alert(coordinates.latitude + ", " + coordinates.longitude);
    }
    function onGeoError(error) {
      alert(error.message);
    }
    ~~~~
        
6. Try it out!

7. Having trouble? Find the contents of the `<script>` in [`supplemental/where-am-i/geo-script.js`](../supplemental/where-am-i/geo-script.js).

-------------------------

# 6. A Band of Brothers

* [jQuery Mobile](http://www.jquerymobile.com)

## Exercise 1: A jQuery Mobile Page for Nabbing Zombies

1. Find the "I got one!" starting point in your rucksack in [`i-got-one/index.html`](../i-got-one/index.html).
1. Add a header:

    ~~~ {.html}
    <div data-role="header">
      <h1>I got one!</h1>
    </div>
    ~~~

1. Add a `<select>` element, an `<input>` button and an empty `<ul>` to hold our incoming dead zombies. This should be the contents of the `<div data-role="content">`:

    ~~~ {.html}
    <div data-role="content">
      <div data-role="fieldcontain">
        <label for="how-zombie">How'd you nab it?</label>
        <select name="how-zombie" id="how-zombie">
          <option value="tank">Tank</option>
          <option value="conflagration">Conflagration</option>
          <option value="poison">Poison</option>
          <option value="nukes">Micro-nukes</option>
          <option value="trickery">Trickery</option>
          <option value="corrosive">Corrosive</option>
          <option value="dismemberment">Dismemberment</option>
        </select>
      </div>
      <input type="button" value="I got one!" id="got-one" data-theme="b" />
      
      <ul data-role="listview" data-inset="true" id="zombielist">
      </ul>
      
    </div>
    ~~~

1. Drop in the intial JavaScript by adding a `<script>` tag after the `geo.js` `<script>` tag:

    ~~~ {.html}
    <script src="zombie.js"></script>
    ~~~

1. You can find the finished version of `index.html` for this step in your rucksack in [`supplemental/band-of-brothers/step1.html`](../supplemental/band-of-brothers/step1.html).

## Step 2: Making the data persistent

For this step, we use [Lawnchair](http://westcoastlogic.com/lawnchair/), an open-source JS library for storing data on the client:

1. Edit the `zombie.js` file.

2. Instantiate the Lawnchair. Add `var zombieChair   = Lawnchair({name: 'zombies'}, function() {});` right after the `zombies` array is created.

    ~~~ {.javascript}
    window.zombieManager = (function() {
      var zombies       = new Array();
      var zombieChair   = Lawnchair({name: 'zombies'}, function() {});
    ~~~~

3. Add an init function. This should go in the returned object in the `zombieManager` function:

    ~~~ {.javascript}
    return {
      // Init; build initial #zombielist
      init          : function() {
        zombieChair.get('zombies', function(zombiesOnIce) {
          if (zombiesOnIce) {
            zombies = zombiesOnIce.value;
          }
        });
        showZombies();
      },
      // Add a new zombie to the list of zombies
      addZombie     : function(zombieWhen, zombieWhere, zombieHow) {
      // ...
    ~~~

4. Update the `addZombie` function such that it also saves the incoming zombie to the Lawnchair:

    ~~~ {.javascript}
      },
      // Add a new zombie to the list of zombies
      addZombie     : function(zombieWhen, zombieWhere, zombieHow) {
        zombies[zombies.length] = {
          when      : zombieWhen.valueOf(),
          where     : zombieWhere,
          how       : zombieHow
        };
        zombieChair.save({key: 'zombies', value : zombies });
        showZombies();
      }
    ~~~

5. Update the `resetZombies` function to clear the Lawnchair using the `nuke` method:

    ~~~ {.javascript}
    var resetZombies = function() {
        zombies = new Array();
        zombieChair.nuke();
        $('li.zombie').remove();
        $('#zombielist').listview('refresh');
      };
    ~~~

6. Now add a call to that new `init` function we wrote...

    ~~~ {.javascript}
    $("#nab-zombie").live('pageinit', function() {
    
      // Initialize our list of zombies
      zombieManager.init();
      // Is Geolocation supported?
      // ...
    ~~~

7. That's a lot of JavaScript. You can also find a final version of `zombie.js` in [`supplemental/band-of-brothers/zombie.js`](../supplemental/band-of-brothers/zombie.js).

8. Now, edit `index.html` again. You need to add the `Lawnchair.js` and the DOM adapter (`dom.js`):
    
    ~~~ {.html}
      <script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
    	<script src="Lawnchair.js"></script>
    	<script src="dom.js"></script>
    	<script src="date.format.js"></script>
    ~~~

----------------------------------

# 7. Desperate Times call for...

## Hybrid App Development with PhoneGap and PhoneGap Build

* [PhoneGap](http://www.phonegap.com)
* [PhoneGap Build](http://build.phonegap.com)

## Anatomy of a PhoneGap Build Config File

Here's our example `config.xml` file.

~~~ {.xml}
<?xml version="1.0" encoding="UTF-8" ?>
    <widget xmlns = "http://www.w3.org/ns/widgets"
        xmlns:gap = "http://phonegap.com/ns/1.0"
        id        = "com.cloudfour.gotone"
        versionCode="10"
        version   = "1.0.0">

    <name>I Got One</name>

    <description>
       Track your zombie kills!
    </description>

    <author href="https://www.cloudfour.com" email="info@cloudfour.com">
        Lyza Gardner and Jason Grigsby
    </author>

    <preference name="orientation" value="portrait" />

    <icon src="app-icons/touch-icon-iphone.png" width="57" height="57"/>
    <icon src="app-icons/touch-icon-ipad.png" width="72" height="72"/>
    <icon src="app-icons/touch-icon-iphone4.png" width="114" height="114"/>

    <gap:splash src="app-icons/splash.png" width="320" height="480" />
    <gap:splash src="app-icons/splash-2x.png" width="640" height="960"/>
</widget>
~~~

(You can also find this in [`supplemental/desperate-times/config.xml`](../supplemental/desperate-times/config.xml)).

-------------------------
# 8. Know Thy Enemy

## Many device detection database options

* [WURFL][wurfl] (Wireless Universal Resource FiLe) by [ScientiaMobile][scientiamobile]
* [DeviceAtlas][deviceatlas] by [dotMobi][dotmobi]
* [OpenDDR][openddr] / New Apache [DeviceMap][devicemap] Project
* [51degrees][51]

## Some sample User Agent strings

~~~

Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5

Mozilla/5.0 (Linux; U; Android 2.2.1; en-us; DROIDX Build/VZW) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 480X854 motorola DROIDX

Mozilla/5.0 (webOS/1.4.5; U; en-US) AppleWebKit/532.2 (KHTML, like Gecko) Version/1.0 Safari/532.2 Pre/1.0

Mozilla/5.0 (Linux; U; Android 2.3.3; en-us; Nexus S Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1

Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.8+ (KHTML, like Gecko) Version/0.0.1 Safari/534.8+

PantechP2020/JIUS05172010R; Mozilla/5.0 (Profile/MIDP-2.0 Configuration/CLDC-1.1; Opera Mini/att/4.2.19039; U; en-US) Opera 9.50

BlackBerry8330/4.5.0.77 Profile/MIDP-2.0 Configuration/CLDC-1.1 VendorID/105

BlackBerry9300/5.0.0.794 Profile/MIDP-2.1 Configuration/CLDC-1.1 VendorID/245

Mozilla/5.0 (Linux; U; Android 2.1-update1; en-us; SAMSUNG-SGH-I897/I897UCJH7 Build/ECLAIR) AppleWebKit/530.17 (KHTML, like Gecko) Version/4.0 Mobile Safari/530.17

facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)
~~~

## Sniffing 'em out

1. Go to the [ScientiaMobile WURFL Explorer][explorer] on your mobile phone
2. Check out the various attributes. What do you see that would be useful?
3. Can you find the screen resolution of your phone?
4. Go to the [ScientiaMobile WURFL Explorer][explorer] on your laptop
5. Try some other mobile user agents from your rucksack for comparison

## WURFL code snipp-lets

~~~ {.php}
<?php
// This assumes the WURFL library is installed and
// a $device object has been initialized.
$value = $device->getCapability('is_wireless_device');
$value = $device->getCapability('cookie_support');
?>
~~~

More documentation on WURFL available on its [Sourceforge page][wurfl].


[zombie-types]: http://uncyclopedia.wikia.com/wiki/Zombie_Types
[wurfl]: http://wurfl.sourceforge.net/
[scientiamobile]: http://www.scientiamobile.com/
[deviceatlas]: http://deviceatlas.com/
[dotmobi]: http://mtld.mobi/
[51]: http://51degrees.mobi/Products/DeviceData.aspx
[devicemap]: http://wiki.apache.org/incubator/DeviceMapProposal
[explorer]: http://www.tera-wurfl.com/explore/
[ress]: http://www.lukew.com/ff/entry.asp?1392